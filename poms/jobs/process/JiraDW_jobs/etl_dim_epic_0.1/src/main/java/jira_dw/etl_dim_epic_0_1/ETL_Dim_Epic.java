// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package jira_dw.etl_dim_epic_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: ETL_Dim_Epic Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status
 */
public class ETL_Dim_Epic implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "ETL_Dim_Epic";
	private final String projectName = "JIRA_DW";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					ETL_Dim_Epic.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(ETL_Dim_Epic.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class opStruct implements routines.system.IPersistableRow<opStruct> {
		final static byte[] commonByteArrayLock_JIRA_DW_ETL_Dim_Epic = new byte[0];
		static byte[] commonByteArray_JIRA_DW_ETL_Dim_Epic = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal ID_Epic;

		public BigDecimal getID_Epic() {
			return this.ID_Epic;
		}

		public BigDecimal issue_num;

		public BigDecimal getIssue_num() {
			return this.issue_num;
		}

		public String assignee;

		public String getAssignee() {
			return this.assignee;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public BigDecimal timeoriginalestimate;

		public BigDecimal getTimeoriginalestimate() {
			return this.timeoriginalestimate;
		}

		public BigDecimal timeestimate;

		public BigDecimal getTimeestimate() {
			return this.timeestimate;
		}

		public BigDecimal timespent;

		public BigDecimal getTimespent() {
			return this.timespent;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID_Epic == null) ? 0 : this.ID_Epic.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final opStruct other = (opStruct) obj;

			if (this.ID_Epic == null) {
				if (other.ID_Epic != null)
					return false;

			} else if (!this.ID_Epic.equals(other.ID_Epic))

				return false;

			return true;
		}

		public void copyDataTo(opStruct other) {

			other.ID_Epic = this.ID_Epic;
			other.issue_num = this.issue_num;
			other.assignee = this.assignee;
			other.description = this.description;
			other.timeoriginalestimate = this.timeoriginalestimate;
			other.timeestimate = this.timeestimate;
			other.timespent = this.timespent;

		}

		public void copyKeysDataTo(opStruct other) {

			other.ID_Epic = this.ID_Epic;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_JIRA_DW_ETL_Dim_Epic.length) {
					if (length < 1024 && commonByteArray_JIRA_DW_ETL_Dim_Epic.length == 0) {
						commonByteArray_JIRA_DW_ETL_Dim_Epic = new byte[1024];
					} else {
						commonByteArray_JIRA_DW_ETL_Dim_Epic = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_JIRA_DW_ETL_Dim_Epic, 0, length);
				strReturn = new String(commonByteArray_JIRA_DW_ETL_Dim_Epic, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_JIRA_DW_ETL_Dim_Epic) {

				try {

					int length = 0;

					this.ID_Epic = (BigDecimal) dis.readObject();

					this.issue_num = (BigDecimal) dis.readObject();

					this.assignee = readString(dis);

					this.description = readString(dis);

					this.timeoriginalestimate = (BigDecimal) dis.readObject();

					this.timeestimate = (BigDecimal) dis.readObject();

					this.timespent = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ID_Epic);

				// BigDecimal

				dos.writeObject(this.issue_num);

				// String

				writeString(this.assignee, dos);

				// String

				writeString(this.description, dos);

				// BigDecimal

				dos.writeObject(this.timeoriginalestimate);

				// BigDecimal

				dos.writeObject(this.timeestimate);

				// BigDecimal

				dos.writeObject(this.timespent);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Epic=" + String.valueOf(ID_Epic));
			sb.append(",issue_num=" + String.valueOf(issue_num));
			sb.append(",assignee=" + assignee);
			sb.append(",description=" + description);
			sb.append(",timeoriginalestimate=" + String.valueOf(timeoriginalestimate));
			sb.append(",timeestimate=" + String.valueOf(timeestimate));
			sb.append(",timespent=" + String.valueOf(timespent));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(opStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Epic, other.ID_Epic);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_JIRA_DW_ETL_Dim_Epic = new byte[0];
		static byte[] commonByteArray_JIRA_DW_ETL_Dim_Epic = new byte[0];

		public BigDecimal id;

		public BigDecimal getId() {
			return this.id;
		}

		public String pkey;

		public String getPkey() {
			return this.pkey;
		}

		public BigDecimal issuenum;

		public BigDecimal getIssuenum() {
			return this.issuenum;
		}

		public BigDecimal project;

		public BigDecimal getProject() {
			return this.project;
		}

		public String reporter;

		public String getReporter() {
			return this.reporter;
		}

		public String assignee;

		public String getAssignee() {
			return this.assignee;
		}

		public String creator;

		public String getCreator() {
			return this.creator;
		}

		public String issuetype;

		public String getIssuetype() {
			return this.issuetype;
		}

		public String summary;

		public String getSummary() {
			return this.summary;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public String environment;

		public String getEnvironment() {
			return this.environment;
		}

		public String priority;

		public String getPriority() {
			return this.priority;
		}

		public String resolution;

		public String getResolution() {
			return this.resolution;
		}

		public String issuestatus;

		public String getIssuestatus() {
			return this.issuestatus;
		}

		public java.util.Date created;

		public java.util.Date getCreated() {
			return this.created;
		}

		public java.util.Date updated;

		public java.util.Date getUpdated() {
			return this.updated;
		}

		public java.util.Date duedate;

		public java.util.Date getDuedate() {
			return this.duedate;
		}

		public java.util.Date resolutiondate;

		public java.util.Date getResolutiondate() {
			return this.resolutiondate;
		}

		public BigDecimal votes;

		public BigDecimal getVotes() {
			return this.votes;
		}

		public BigDecimal watches;

		public BigDecimal getWatches() {
			return this.watches;
		}

		public BigDecimal timeoriginalestimate;

		public BigDecimal getTimeoriginalestimate() {
			return this.timeoriginalestimate;
		}

		public BigDecimal timeestimate;

		public BigDecimal getTimeestimate() {
			return this.timeestimate;
		}

		public BigDecimal timespent;

		public BigDecimal getTimespent() {
			return this.timespent;
		}

		public BigDecimal workflow_id;

		public BigDecimal getWorkflow_id() {
			return this.workflow_id;
		}

		public BigDecimal security;

		public BigDecimal getSecurity() {
			return this.security;
		}

		public BigDecimal fixfor;

		public BigDecimal getFixfor() {
			return this.fixfor;
		}

		public BigDecimal component;

		public BigDecimal getComponent() {
			return this.component;
		}

		public String archived;

		public String getArchived() {
			return this.archived;
		}

		public String archivedby;

		public String getArchivedby() {
			return this.archivedby;
		}

		public java.util.Date archiveddate;

		public java.util.Date getArchiveddate() {
			return this.archiveddate;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_JIRA_DW_ETL_Dim_Epic.length) {
					if (length < 1024 && commonByteArray_JIRA_DW_ETL_Dim_Epic.length == 0) {
						commonByteArray_JIRA_DW_ETL_Dim_Epic = new byte[1024];
					} else {
						commonByteArray_JIRA_DW_ETL_Dim_Epic = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_JIRA_DW_ETL_Dim_Epic, 0, length);
				strReturn = new String(commonByteArray_JIRA_DW_ETL_Dim_Epic, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_JIRA_DW_ETL_Dim_Epic) {

				try {

					int length = 0;

					this.id = (BigDecimal) dis.readObject();

					this.pkey = readString(dis);

					this.issuenum = (BigDecimal) dis.readObject();

					this.project = (BigDecimal) dis.readObject();

					this.reporter = readString(dis);

					this.assignee = readString(dis);

					this.creator = readString(dis);

					this.issuetype = readString(dis);

					this.summary = readString(dis);

					this.description = readString(dis);

					this.environment = readString(dis);

					this.priority = readString(dis);

					this.resolution = readString(dis);

					this.issuestatus = readString(dis);

					this.created = readDate(dis);

					this.updated = readDate(dis);

					this.duedate = readDate(dis);

					this.resolutiondate = readDate(dis);

					this.votes = (BigDecimal) dis.readObject();

					this.watches = (BigDecimal) dis.readObject();

					this.timeoriginalestimate = (BigDecimal) dis.readObject();

					this.timeestimate = (BigDecimal) dis.readObject();

					this.timespent = (BigDecimal) dis.readObject();

					this.workflow_id = (BigDecimal) dis.readObject();

					this.security = (BigDecimal) dis.readObject();

					this.fixfor = (BigDecimal) dis.readObject();

					this.component = (BigDecimal) dis.readObject();

					this.archived = readString(dis);

					this.archivedby = readString(dis);

					this.archiveddate = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.id);

				// String

				writeString(this.pkey, dos);

				// BigDecimal

				dos.writeObject(this.issuenum);

				// BigDecimal

				dos.writeObject(this.project);

				// String

				writeString(this.reporter, dos);

				// String

				writeString(this.assignee, dos);

				// String

				writeString(this.creator, dos);

				// String

				writeString(this.issuetype, dos);

				// String

				writeString(this.summary, dos);

				// String

				writeString(this.description, dos);

				// String

				writeString(this.environment, dos);

				// String

				writeString(this.priority, dos);

				// String

				writeString(this.resolution, dos);

				// String

				writeString(this.issuestatus, dos);

				// java.util.Date

				writeDate(this.created, dos);

				// java.util.Date

				writeDate(this.updated, dos);

				// java.util.Date

				writeDate(this.duedate, dos);

				// java.util.Date

				writeDate(this.resolutiondate, dos);

				// BigDecimal

				dos.writeObject(this.votes);

				// BigDecimal

				dos.writeObject(this.watches);

				// BigDecimal

				dos.writeObject(this.timeoriginalestimate);

				// BigDecimal

				dos.writeObject(this.timeestimate);

				// BigDecimal

				dos.writeObject(this.timespent);

				// BigDecimal

				dos.writeObject(this.workflow_id);

				// BigDecimal

				dos.writeObject(this.security);

				// BigDecimal

				dos.writeObject(this.fixfor);

				// BigDecimal

				dos.writeObject(this.component);

				// String

				writeString(this.archived, dos);

				// String

				writeString(this.archivedby, dos);

				// java.util.Date

				writeDate(this.archiveddate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",pkey=" + pkey);
			sb.append(",issuenum=" + String.valueOf(issuenum));
			sb.append(",project=" + String.valueOf(project));
			sb.append(",reporter=" + reporter);
			sb.append(",assignee=" + assignee);
			sb.append(",creator=" + creator);
			sb.append(",issuetype=" + issuetype);
			sb.append(",summary=" + summary);
			sb.append(",description=" + description);
			sb.append(",environment=" + environment);
			sb.append(",priority=" + priority);
			sb.append(",resolution=" + resolution);
			sb.append(",issuestatus=" + issuestatus);
			sb.append(",created=" + String.valueOf(created));
			sb.append(",updated=" + String.valueOf(updated));
			sb.append(",duedate=" + String.valueOf(duedate));
			sb.append(",resolutiondate=" + String.valueOf(resolutiondate));
			sb.append(",votes=" + String.valueOf(votes));
			sb.append(",watches=" + String.valueOf(watches));
			sb.append(",timeoriginalestimate=" + String.valueOf(timeoriginalestimate));
			sb.append(",timeestimate=" + String.valueOf(timeestimate));
			sb.append(",timespent=" + String.valueOf(timespent));
			sb.append(",workflow_id=" + String.valueOf(workflow_id));
			sb.append(",security=" + String.valueOf(security));
			sb.append(",fixfor=" + String.valueOf(fixfor));
			sb.append(",component=" + String.valueOf(component));
			sb.append(",archived=" + archived);
			sb.append(",archivedby=" + archivedby);
			sb.append(",archiveddate=" + String.valueOf(archiveddate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_1Struct implements routines.system.IPersistableRow<after_tDBInput_1Struct> {
		final static byte[] commonByteArrayLock_JIRA_DW_ETL_Dim_Epic = new byte[0];
		static byte[] commonByteArray_JIRA_DW_ETL_Dim_Epic = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal id;

		public BigDecimal getId() {
			return this.id;
		}

		public String pkey;

		public String getPkey() {
			return this.pkey;
		}

		public BigDecimal issuenum;

		public BigDecimal getIssuenum() {
			return this.issuenum;
		}

		public BigDecimal project;

		public BigDecimal getProject() {
			return this.project;
		}

		public String reporter;

		public String getReporter() {
			return this.reporter;
		}

		public String assignee;

		public String getAssignee() {
			return this.assignee;
		}

		public String creator;

		public String getCreator() {
			return this.creator;
		}

		public String issuetype;

		public String getIssuetype() {
			return this.issuetype;
		}

		public String summary;

		public String getSummary() {
			return this.summary;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public String environment;

		public String getEnvironment() {
			return this.environment;
		}

		public String priority;

		public String getPriority() {
			return this.priority;
		}

		public String resolution;

		public String getResolution() {
			return this.resolution;
		}

		public String issuestatus;

		public String getIssuestatus() {
			return this.issuestatus;
		}

		public java.util.Date created;

		public java.util.Date getCreated() {
			return this.created;
		}

		public java.util.Date updated;

		public java.util.Date getUpdated() {
			return this.updated;
		}

		public java.util.Date duedate;

		public java.util.Date getDuedate() {
			return this.duedate;
		}

		public java.util.Date resolutiondate;

		public java.util.Date getResolutiondate() {
			return this.resolutiondate;
		}

		public BigDecimal votes;

		public BigDecimal getVotes() {
			return this.votes;
		}

		public BigDecimal watches;

		public BigDecimal getWatches() {
			return this.watches;
		}

		public BigDecimal timeoriginalestimate;

		public BigDecimal getTimeoriginalestimate() {
			return this.timeoriginalestimate;
		}

		public BigDecimal timeestimate;

		public BigDecimal getTimeestimate() {
			return this.timeestimate;
		}

		public BigDecimal timespent;

		public BigDecimal getTimespent() {
			return this.timespent;
		}

		public BigDecimal workflow_id;

		public BigDecimal getWorkflow_id() {
			return this.workflow_id;
		}

		public BigDecimal security;

		public BigDecimal getSecurity() {
			return this.security;
		}

		public BigDecimal fixfor;

		public BigDecimal getFixfor() {
			return this.fixfor;
		}

		public BigDecimal component;

		public BigDecimal getComponent() {
			return this.component;
		}

		public String archived;

		public String getArchived() {
			return this.archived;
		}

		public String archivedby;

		public String getArchivedby() {
			return this.archivedby;
		}

		public java.util.Date archiveddate;

		public java.util.Date getArchiveddate() {
			return this.archiveddate;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tDBInput_1Struct other = (after_tDBInput_1Struct) obj;

			if (this.id == null) {
				if (other.id != null)
					return false;

			} else if (!this.id.equals(other.id))

				return false;

			return true;
		}

		public void copyDataTo(after_tDBInput_1Struct other) {

			other.id = this.id;
			other.pkey = this.pkey;
			other.issuenum = this.issuenum;
			other.project = this.project;
			other.reporter = this.reporter;
			other.assignee = this.assignee;
			other.creator = this.creator;
			other.issuetype = this.issuetype;
			other.summary = this.summary;
			other.description = this.description;
			other.environment = this.environment;
			other.priority = this.priority;
			other.resolution = this.resolution;
			other.issuestatus = this.issuestatus;
			other.created = this.created;
			other.updated = this.updated;
			other.duedate = this.duedate;
			other.resolutiondate = this.resolutiondate;
			other.votes = this.votes;
			other.watches = this.watches;
			other.timeoriginalestimate = this.timeoriginalestimate;
			other.timeestimate = this.timeestimate;
			other.timespent = this.timespent;
			other.workflow_id = this.workflow_id;
			other.security = this.security;
			other.fixfor = this.fixfor;
			other.component = this.component;
			other.archived = this.archived;
			other.archivedby = this.archivedby;
			other.archiveddate = this.archiveddate;

		}

		public void copyKeysDataTo(after_tDBInput_1Struct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_JIRA_DW_ETL_Dim_Epic.length) {
					if (length < 1024 && commonByteArray_JIRA_DW_ETL_Dim_Epic.length == 0) {
						commonByteArray_JIRA_DW_ETL_Dim_Epic = new byte[1024];
					} else {
						commonByteArray_JIRA_DW_ETL_Dim_Epic = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_JIRA_DW_ETL_Dim_Epic, 0, length);
				strReturn = new String(commonByteArray_JIRA_DW_ETL_Dim_Epic, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_JIRA_DW_ETL_Dim_Epic) {

				try {

					int length = 0;

					this.id = (BigDecimal) dis.readObject();

					this.pkey = readString(dis);

					this.issuenum = (BigDecimal) dis.readObject();

					this.project = (BigDecimal) dis.readObject();

					this.reporter = readString(dis);

					this.assignee = readString(dis);

					this.creator = readString(dis);

					this.issuetype = readString(dis);

					this.summary = readString(dis);

					this.description = readString(dis);

					this.environment = readString(dis);

					this.priority = readString(dis);

					this.resolution = readString(dis);

					this.issuestatus = readString(dis);

					this.created = readDate(dis);

					this.updated = readDate(dis);

					this.duedate = readDate(dis);

					this.resolutiondate = readDate(dis);

					this.votes = (BigDecimal) dis.readObject();

					this.watches = (BigDecimal) dis.readObject();

					this.timeoriginalestimate = (BigDecimal) dis.readObject();

					this.timeestimate = (BigDecimal) dis.readObject();

					this.timespent = (BigDecimal) dis.readObject();

					this.workflow_id = (BigDecimal) dis.readObject();

					this.security = (BigDecimal) dis.readObject();

					this.fixfor = (BigDecimal) dis.readObject();

					this.component = (BigDecimal) dis.readObject();

					this.archived = readString(dis);

					this.archivedby = readString(dis);

					this.archiveddate = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.id);

				// String

				writeString(this.pkey, dos);

				// BigDecimal

				dos.writeObject(this.issuenum);

				// BigDecimal

				dos.writeObject(this.project);

				// String

				writeString(this.reporter, dos);

				// String

				writeString(this.assignee, dos);

				// String

				writeString(this.creator, dos);

				// String

				writeString(this.issuetype, dos);

				// String

				writeString(this.summary, dos);

				// String

				writeString(this.description, dos);

				// String

				writeString(this.environment, dos);

				// String

				writeString(this.priority, dos);

				// String

				writeString(this.resolution, dos);

				// String

				writeString(this.issuestatus, dos);

				// java.util.Date

				writeDate(this.created, dos);

				// java.util.Date

				writeDate(this.updated, dos);

				// java.util.Date

				writeDate(this.duedate, dos);

				// java.util.Date

				writeDate(this.resolutiondate, dos);

				// BigDecimal

				dos.writeObject(this.votes);

				// BigDecimal

				dos.writeObject(this.watches);

				// BigDecimal

				dos.writeObject(this.timeoriginalestimate);

				// BigDecimal

				dos.writeObject(this.timeestimate);

				// BigDecimal

				dos.writeObject(this.timespent);

				// BigDecimal

				dos.writeObject(this.workflow_id);

				// BigDecimal

				dos.writeObject(this.security);

				// BigDecimal

				dos.writeObject(this.fixfor);

				// BigDecimal

				dos.writeObject(this.component);

				// String

				writeString(this.archived, dos);

				// String

				writeString(this.archivedby, dos);

				// java.util.Date

				writeDate(this.archiveddate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",pkey=" + pkey);
			sb.append(",issuenum=" + String.valueOf(issuenum));
			sb.append(",project=" + String.valueOf(project));
			sb.append(",reporter=" + reporter);
			sb.append(",assignee=" + assignee);
			sb.append(",creator=" + creator);
			sb.append(",issuetype=" + issuetype);
			sb.append(",summary=" + summary);
			sb.append(",description=" + description);
			sb.append(",environment=" + environment);
			sb.append(",priority=" + priority);
			sb.append(",resolution=" + resolution);
			sb.append(",issuestatus=" + issuestatus);
			sb.append(",created=" + String.valueOf(created));
			sb.append(",updated=" + String.valueOf(updated));
			sb.append(",duedate=" + String.valueOf(duedate));
			sb.append(",resolutiondate=" + String.valueOf(resolutiondate));
			sb.append(",votes=" + String.valueOf(votes));
			sb.append(",watches=" + String.valueOf(watches));
			sb.append(",timeoriginalestimate=" + String.valueOf(timeoriginalestimate));
			sb.append(",timeestimate=" + String.valueOf(timeestimate));
			sb.append(",timespent=" + String.valueOf(timespent));
			sb.append(",workflow_id=" + String.valueOf(workflow_id));
			sb.append(",security=" + String.valueOf(security));
			sb.append(",fixfor=" + String.valueOf(fixfor));
			sb.append(",component=" + String.valueOf(component));
			sb.append(",archived=" + archived);
			sb.append(",archivedby=" + archivedby);
			sb.append(",archiveddate=" + String.valueOf(archiveddate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_2Process(globalMap);

				row1Struct row1 = new row1Struct();
				opStruct op = new opStruct();

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "op");
				}

				int tos_count_tDBOutput_1 = 0;

				String dbschema_tDBOutput_1 = null;
				dbschema_tDBOutput_1 = "";

				String tableName_tDBOutput_1 = null;
				if (dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
					tableName_tDBOutput_1 = ("Dim_Epic");
				} else {
					tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("Dim_Epic");
				}

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;

				boolean whetherReject_tDBOutput_1 = false;

				java.sql.Connection conn_tDBOutput_1 = null;
				String dbUser_tDBOutput_1 = null;

				java.lang.Class.forName("org.postgresql.Driver");

				String url_tDBOutput_1 = "jdbc:postgresql://" + "127.0.0.1" + ":" + "5432" + "/" + "JiraDW";
				dbUser_tDBOutput_1 = "postgres";

				final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:k0P5mwbNxbeBrrrr/LY2wyVZTuKBrADzH1TAoaO2PYt2Wg==");

				String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;

				conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1,
						dbPwd_tDBOutput_1);

				resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
				conn_tDBOutput_1.setAutoCommit(false);
				int commitEvery_tDBOutput_1 = 10000;
				int commitCounter_tDBOutput_1 = 0;

				int batchSize_tDBOutput_1 = 10000;
				int batchSizeCounter_tDBOutput_1 = 0;

				int count_tDBOutput_1 = 0;
				String insert_tDBOutput_1 = "INSERT INTO \"" + tableName_tDBOutput_1
						+ "\" (\"ID_Epic\",\"issue_num\",\"assignee\",\"description\",\"timeoriginalestimate\",\"timeestimate\",\"timespent\") VALUES (?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) globalMap
						.get("tHash_Lookup_row2"));

				row2Struct row2HashKey = new row2Struct();
				row2Struct row2Default = new row2Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				opStruct op_tmp = new opStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = "postgres";

				final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:b52LfqW8J4qfazzDowxRLYiR4u1y9r0EfHwVjJRFyyr7VA==");

				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;

				String url_tDBInput_1 = "jdbc:postgresql://" + "127.0.0.1" + ":" + "5432" + "/" + "newdb";

				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1, dbUser_tDBInput_1,
						dbPwd_tDBInput_1);

				conn_tDBInput_1.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

				String dbquery_tDBInput_1 = "SELECT \n  \"jiraissue\".\"id\", \n  \"jiraissue\".\"pkey\", \n  \"jiraissue\".\"issuenum\", \n   \"jiraissue\".\"project\""
						+ ", \n   \"jiraissue\".\"reporter\", \n  \"jiraissue\".\"assignee\", \n  \"jiraissue\".\"creator\", \n  \"jiraissue\".\"issuet"
						+ "ype\", \n  \"jiraissue\".\"summary\", \n  \"jiraissue\".\"description\", \n  \"jiraissue\".\"environment\", \n  \"jiraissue"
						+ "\".\"priority\", \n  \"jiraissue\".\"resolution\", \n  \"jiraissue\".\"issuestatus\", \n  \"jiraissue\".\"created\", \n  \"j"
						+ "iraissue\".\"updated\", \n  \"jiraissue\".\"duedate\", \n  \"jiraissue\".\"resolutiondate\", \n  \"jiraissue\".\"votes\", \n"
						+ "  \"jiraissue\".\"watches\", \n  \"jiraissue\".\"timeoriginalestimate\", \n  \"jiraissue\".\"timeestimate\", \n  \"jiraissu"
						+ "e\".\"timespent\", \n  \"jiraissue\".\"workflow_id\", \n  \"jiraissue\".\"security\", \n  \"jiraissue\".\"fixfor\", \n  \"ji"
						+ "raissue\".\"component\", \n  \"jiraissue\".\"archived\", \n  \"jiraissue\".\"archivedby\", \n   \"jiraissue\".\"archiveddat"
						+ "e\"\nFROM \"jiraissue\"";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row1.id = null;
						} else {

							row1.id = rs_tDBInput_1.getBigDecimal(1);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row1.pkey = null;
						} else {

							row1.pkey = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							row1.issuenum = null;
						} else {

							row1.issuenum = rs_tDBInput_1.getBigDecimal(3);
							if (rs_tDBInput_1.wasNull()) {
								row1.issuenum = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 4) {
							row1.project = null;
						} else {

							row1.project = rs_tDBInput_1.getBigDecimal(4);
							if (rs_tDBInput_1.wasNull()) {
								row1.project = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 5) {
							row1.reporter = null;
						} else {

							row1.reporter = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, false);
						}
						if (colQtyInRs_tDBInput_1 < 6) {
							row1.assignee = null;
						} else {

							row1.assignee = routines.system.JDBCUtil.getString(rs_tDBInput_1, 6, false);
						}
						if (colQtyInRs_tDBInput_1 < 7) {
							row1.creator = null;
						} else {

							row1.creator = routines.system.JDBCUtil.getString(rs_tDBInput_1, 7, false);
						}
						if (colQtyInRs_tDBInput_1 < 8) {
							row1.issuetype = null;
						} else {

							row1.issuetype = routines.system.JDBCUtil.getString(rs_tDBInput_1, 8, false);
						}
						if (colQtyInRs_tDBInput_1 < 9) {
							row1.summary = null;
						} else {

							row1.summary = routines.system.JDBCUtil.getString(rs_tDBInput_1, 9, false);
						}
						if (colQtyInRs_tDBInput_1 < 10) {
							row1.description = null;
						} else {

							row1.description = routines.system.JDBCUtil.getString(rs_tDBInput_1, 10, false);
						}
						if (colQtyInRs_tDBInput_1 < 11) {
							row1.environment = null;
						} else {

							row1.environment = routines.system.JDBCUtil.getString(rs_tDBInput_1, 11, false);
						}
						if (colQtyInRs_tDBInput_1 < 12) {
							row1.priority = null;
						} else {

							row1.priority = routines.system.JDBCUtil.getString(rs_tDBInput_1, 12, false);
						}
						if (colQtyInRs_tDBInput_1 < 13) {
							row1.resolution = null;
						} else {

							row1.resolution = routines.system.JDBCUtil.getString(rs_tDBInput_1, 13, false);
						}
						if (colQtyInRs_tDBInput_1 < 14) {
							row1.issuestatus = null;
						} else {

							row1.issuestatus = routines.system.JDBCUtil.getString(rs_tDBInput_1, 14, false);
						}
						if (colQtyInRs_tDBInput_1 < 15) {
							row1.created = null;
						} else {

							row1.created = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 15);
						}
						if (colQtyInRs_tDBInput_1 < 16) {
							row1.updated = null;
						} else {

							row1.updated = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 16);
						}
						if (colQtyInRs_tDBInput_1 < 17) {
							row1.duedate = null;
						} else {

							row1.duedate = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 17);
						}
						if (colQtyInRs_tDBInput_1 < 18) {
							row1.resolutiondate = null;
						} else {

							row1.resolutiondate = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 18);
						}
						if (colQtyInRs_tDBInput_1 < 19) {
							row1.votes = null;
						} else {

							row1.votes = rs_tDBInput_1.getBigDecimal(19);
							if (rs_tDBInput_1.wasNull()) {
								row1.votes = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 20) {
							row1.watches = null;
						} else {

							row1.watches = rs_tDBInput_1.getBigDecimal(20);
							if (rs_tDBInput_1.wasNull()) {
								row1.watches = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 21) {
							row1.timeoriginalestimate = null;
						} else {

							row1.timeoriginalestimate = rs_tDBInput_1.getBigDecimal(21);
							if (rs_tDBInput_1.wasNull()) {
								row1.timeoriginalestimate = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 22) {
							row1.timeestimate = null;
						} else {

							row1.timeestimate = rs_tDBInput_1.getBigDecimal(22);
							if (rs_tDBInput_1.wasNull()) {
								row1.timeestimate = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 23) {
							row1.timespent = null;
						} else {

							row1.timespent = rs_tDBInput_1.getBigDecimal(23);
							if (rs_tDBInput_1.wasNull()) {
								row1.timespent = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 24) {
							row1.workflow_id = null;
						} else {

							row1.workflow_id = rs_tDBInput_1.getBigDecimal(24);
							if (rs_tDBInput_1.wasNull()) {
								row1.workflow_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 25) {
							row1.security = null;
						} else {

							row1.security = rs_tDBInput_1.getBigDecimal(25);
							if (rs_tDBInput_1.wasNull()) {
								row1.security = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 26) {
							row1.fixfor = null;
						} else {

							row1.fixfor = rs_tDBInput_1.getBigDecimal(26);
							if (rs_tDBInput_1.wasNull()) {
								row1.fixfor = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 27) {
							row1.component = null;
						} else {

							row1.component = rs_tDBInput_1.getBigDecimal(27);
							if (rs_tDBInput_1.wasNull()) {
								row1.component = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 28) {
							row1.archived = null;
						} else {

							row1.archived = routines.system.JDBCUtil.getString(rs_tDBInput_1, 28, false);
						}
						if (colQtyInRs_tDBInput_1 < 29) {
							row1.archivedby = null;
						} else {

							row1.archivedby = routines.system.JDBCUtil.getString(rs_tDBInput_1, 29, false);
						}
						if (colQtyInRs_tDBInput_1 < 30) {
							row1.archiveddate = null;
						} else {

							row1.archiveddate = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 30);
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row1");
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						///////////////////////////////////////////////
						// Starting Lookup Table "row2"
						///////////////////////////////////////////////

						boolean forceLooprow2 = false;

						row2Struct row2ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							row2HashKey.id = row1.issuetype;

							row2HashKey.hashCodeDirty = true;

							tHash_Lookup_row2.lookup(row2HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row2 != null && tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2'
							// and it contains more one result from keys : row2.id = '" + row2HashKey.id +
							// "'");
						} // G 071

						row2Struct row2 = null;

						row2Struct fromLookup_row2 = null;
						row2 = row2Default;

						if (tHash_Lookup_row2 != null && tHash_Lookup_row2.hasNext()) { // G 099

							fromLookup_row2 = tHash_Lookup_row2.next();

						} // G 099

						if (fromLookup_row2 != null) {
							row2 = fromLookup_row2;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							op = null;

// # Output table : 'op'
							op_tmp.ID_Epic = row1.id;
							op_tmp.issue_num = row1.issuenum;
							op_tmp.assignee = row1.assignee;
							op_tmp.description = row1.description;
							op_tmp.timeoriginalestimate = row1.timeoriginalestimate;
							op_tmp.timeestimate = row1.timeestimate;
							op_tmp.timespent = row1.timespent;
							op = op_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */

						/**
						 * [tMap_1 process_data_begin ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_begin ] stop
						 */
// Start of branch "op"
						if (op != null) {

							/**
							 * [tDBOutput_1 main ] start
							 */

							currentComponent = "tDBOutput_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "op");
							}

							whetherReject_tDBOutput_1 = false;
							pstmt_tDBOutput_1.setBigDecimal(1, op.ID_Epic);

							pstmt_tDBOutput_1.setBigDecimal(2, op.issue_num);

							if (op.assignee == null) {
								pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(3, op.assignee);
							}

							if (op.description == null) {
								pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(4, op.description);
							}

							pstmt_tDBOutput_1.setBigDecimal(5, op.timeoriginalestimate);

							pstmt_tDBOutput_1.setBigDecimal(6, op.timeestimate);

							pstmt_tDBOutput_1.setBigDecimal(7, op.timespent);

							pstmt_tDBOutput_1.addBatch();
							nb_line_tDBOutput_1++;

							batchSizeCounter_tDBOutput_1++;

							if ((batchSize_tDBOutput_1 > 0)
									&& (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
								try {
									int countSum_tDBOutput_1 = 0;

									for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
										countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
									}

									insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

									batchSizeCounter_tDBOutput_1 = 0;
								} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
									java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),
											sqle_tDBOutput_1 = null;
									String errormessage_tDBOutput_1;
									if (ne_tDBOutput_1 != null) {
										// build new exception to provide the original cause
										sqle_tDBOutput_1 = new java.sql.SQLException(
												e_tDBOutput_1.getMessage() + "\ncaused by: "
														+ ne_tDBOutput_1.getMessage(),
												ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(),
												ne_tDBOutput_1);
										errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
									} else {
										errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
									}

									int countSum_tDBOutput_1 = 0;
									for (int countEach_tDBOutput_1 : e_tDBOutput_1.getUpdateCounts()) {
										countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
									}

									insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

									System.err.println(errormessage_tDBOutput_1);

								}
							}

							commitCounter_tDBOutput_1++;
							if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
								if ((batchSize_tDBOutput_1 > 0) && (batchSizeCounter_tDBOutput_1 > 0)) {
									try {
										int countSum_tDBOutput_1 = 0;

										for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
											countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
													: countEach_tDBOutput_1);
										}

										insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

										batchSizeCounter_tDBOutput_1 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
										java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),
												sqle_tDBOutput_1 = null;
										String errormessage_tDBOutput_1;
										if (ne_tDBOutput_1 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_1 = new java.sql.SQLException(
													e_tDBOutput_1.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_1.getMessage(),
													ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(),
													ne_tDBOutput_1);
											errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
										} else {
											errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
										}

										int countSum_tDBOutput_1 = 0;
										for (int countEach_tDBOutput_1 : e_tDBOutput_1.getUpdateCounts()) {
											countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
													: countEach_tDBOutput_1);
										}

										insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

										System.err.println(errormessage_tDBOutput_1);

									}
								}
								conn_tDBOutput_1.commit();

								commitCounter_tDBOutput_1 = 0;
							}

							tos_count_tDBOutput_1++;

							/**
							 * [tDBOutput_1 main ] stop
							 */

							/**
							 * [tDBOutput_1 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_1";

							/**
							 * [tDBOutput_1 process_data_begin ] stop
							 */

							/**
							 * [tDBOutput_1 process_data_end ] start
							 */

							currentComponent = "tDBOutput_1";

							/**
							 * [tDBOutput_1 process_data_end ] stop
							 */

						} // End of branch "op"

						/**
						 * [tMap_1 process_data_end ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
					if (conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {

						conn_tDBInput_1.commit();

						conn_tDBInput_1.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}
				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row2 != null) {
					tHash_Lookup_row2.endGet();
				}
				globalMap.remove("tHash_Lookup_row2");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					int countSum_tDBOutput_1 = 0;
					if (pstmt_tDBOutput_1 != null && batchSizeCounter_tDBOutput_1 > 0) {

						for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}

					}

					insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

				} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
					java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(), sqle_tDBOutput_1 = null;
					String errormessage_tDBOutput_1;
					if (ne_tDBOutput_1 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_1 = new java.sql.SQLException(
								e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(),
								ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
						errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
					} else {
						errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
					}

					int countSum_tDBOutput_1 = 0;
					for (int countEach_tDBOutput_1 : e_tDBOutput_1.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}

					insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

					System.err.println(errormessage_tDBOutput_1);

				}

				if (pstmt_tDBOutput_1 != null) {

					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");
				}
				resourceMap.put("statementClosed_tDBOutput_1", true);

				conn_tDBOutput_1.commit();

				conn_tDBOutput_1.close();

				resourceMap.put("finish_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "op");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row2");

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
						if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_1")) != null) {
							pstmtToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements routines.system.IPersistableComparableLookupRow<row2Struct> {
		final static byte[] commonByteArrayLock_JIRA_DW_ETL_Dim_Epic = new byte[0];
		static byte[] commonByteArray_JIRA_DW_ETL_Dim_Epic = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String id;

		public String getId() {
			return this.id;
		}

		public BigDecimal sequence;

		public BigDecimal getSequence() {
			return this.sequence;
		}

		public String pname;

		public String getPname() {
			return this.pname;
		}

		public String pstyle;

		public String getPstyle() {
			return this.pstyle;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public String iconurl;

		public String getIconurl() {
			return this.iconurl;
		}

		public BigDecimal avatar;

		public BigDecimal getAvatar() {
			return this.avatar;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.id == null) {
				if (other.id != null)
					return false;

			} else if (!this.id.equals(other.id))

				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.id = this.id;
			other.sequence = this.sequence;
			other.pname = this.pname;
			other.pstyle = this.pstyle;
			other.description = this.description;
			other.iconurl = this.iconurl;
			other.avatar = this.avatar;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_JIRA_DW_ETL_Dim_Epic.length) {
					if (length < 1024 && commonByteArray_JIRA_DW_ETL_Dim_Epic.length == 0) {
						commonByteArray_JIRA_DW_ETL_Dim_Epic = new byte[1024];
					} else {
						commonByteArray_JIRA_DW_ETL_Dim_Epic = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_JIRA_DW_ETL_Dim_Epic, 0, length);
				strReturn = new String(commonByteArray_JIRA_DW_ETL_Dim_Epic, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_JIRA_DW_ETL_Dim_Epic) {

				try {

					int length = 0;

					this.id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.sequence = (BigDecimal) ois.readObject();

				this.pname = readString(dis, ois);

				this.pstyle = readString(dis, ois);

				this.description = readString(dis, ois);

				this.iconurl = readString(dis, ois);

				this.avatar = (BigDecimal) ois.readObject();

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				oos.writeObject(this.sequence);

				writeString(this.pname, dos, oos);

				writeString(this.pstyle, dos, oos);

				writeString(this.description, dos, oos);

				writeString(this.iconurl, dos, oos);

				oos.writeObject(this.avatar);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",sequence=" + String.valueOf(sequence));
			sb.append(",pname=" + pname);
			sb.append(",pstyle=" + pstyle);
			sb.append(",description=" + description);
			sb.append(",iconurl=" + iconurl);
			sb.append(",avatar=" + String.valueOf(avatar));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tAdvancedHash_row2 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row2", false);
				start_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tAdvancedHash_row2 = 0;

				// connection name:row2
				// source node:tDBInput_2 - inputs:(after_tDBInput_1) outputs:(row2,row2) |
				// target node:tAdvancedHash_row2 - inputs:(row2) outputs:()
				// linked node: tMap_1 - inputs:(row1,row2) outputs:(op)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row2Struct>getLookup(matchingModeEnum_row2);

				globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);

				/**
				 * [tAdvancedHash_row2 begin ] stop
				 */

				/**
				 * [tDBInput_2 begin ] start
				 */

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				int nb_line_tDBInput_2 = 0;
				java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = "postgres";

				final String decryptedPassword_tDBInput_2 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:N+ATffZmN5zh8gkAV7AnHu4iQ8S3c7tBUd9p2nRjPhYQxw==");

				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;

				String url_tDBInput_2 = "jdbc:postgresql://" + "127.0.0.1" + ":" + "5432" + "/" + "newdb";

				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2, dbUser_tDBInput_2,
						dbPwd_tDBInput_2);

				conn_tDBInput_2.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

				String dbquery_tDBInput_2 = "SELECT \n  \"issuetype\".\"id\", \n  \"issuetype\".\"sequence\", \n  \"issuetype\".\"pname\", \n  \"issuetype\".\"pstyle\","
						+ " \n  \"issuetype\".\"description\", \n  \"issuetype\".\"iconurl\", \n  \"issuetype\".\"avatar\"\nFROM \"issuetype\"";

				globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
				java.sql.ResultSet rs_tDBInput_2 = null;

				try {
					rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
					java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
					int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

					String tmpContent_tDBInput_2 = null;

					while (rs_tDBInput_2.next()) {
						nb_line_tDBInput_2++;

						if (colQtyInRs_tDBInput_2 < 1) {
							row2.id = null;
						} else {

							row2.id = routines.system.JDBCUtil.getString(rs_tDBInput_2, 1, false);
						}
						if (colQtyInRs_tDBInput_2 < 2) {
							row2.sequence = null;
						} else {

							row2.sequence = rs_tDBInput_2.getBigDecimal(2);
							if (rs_tDBInput_2.wasNull()) {
								row2.sequence = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 3) {
							row2.pname = null;
						} else {

							row2.pname = routines.system.JDBCUtil.getString(rs_tDBInput_2, 3, false);
						}
						if (colQtyInRs_tDBInput_2 < 4) {
							row2.pstyle = null;
						} else {

							row2.pstyle = routines.system.JDBCUtil.getString(rs_tDBInput_2, 4, false);
						}
						if (colQtyInRs_tDBInput_2 < 5) {
							row2.description = null;
						} else {

							row2.description = routines.system.JDBCUtil.getString(rs_tDBInput_2, 5, false);
						}
						if (colQtyInRs_tDBInput_2 < 6) {
							row2.iconurl = null;
						} else {

							row2.iconurl = routines.system.JDBCUtil.getString(rs_tDBInput_2, 6, false);
						}
						if (colQtyInRs_tDBInput_2 < 7) {
							row2.avatar = null;
						} else {

							row2.avatar = rs_tDBInput_2.getBigDecimal(7);
							if (rs_tDBInput_2.wasNull()) {
								row2.avatar = null;
							}
						}

						/**
						 * [tDBInput_2 begin ] stop
						 */

						/**
						 * [tDBInput_2 main ] start
						 */

						currentComponent = "tDBInput_2";

						tos_count_tDBInput_2++;

						/**
						 * [tDBInput_2 main ] stop
						 */

						/**
						 * [tDBInput_2 process_data_begin ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row2 main ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row2");
						}

						row2Struct row2_HashRow = new row2Struct();

						row2_HashRow.id = row2.id;

						row2_HashRow.sequence = row2.sequence;

						row2_HashRow.pname = row2.pname;

						row2_HashRow.pstyle = row2.pstyle;

						row2_HashRow.description = row2.description;

						row2_HashRow.iconurl = row2.iconurl;

						row2_HashRow.avatar = row2.avatar;

						tHash_Lookup_row2.put(row2_HashRow);

						tos_count_tAdvancedHash_row2++;

						/**
						 * [tAdvancedHash_row2 main ] stop
						 */

						/**
						 * [tAdvancedHash_row2 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						/**
						 * [tAdvancedHash_row2 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row2 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						/**
						 * [tAdvancedHash_row2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 process_data_end ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 end ] start
						 */

						currentComponent = "tDBInput_2";

					}
				} finally {
					if (rs_tDBInput_2 != null) {
						rs_tDBInput_2.close();
					}
					if (stmt_tDBInput_2 != null) {
						stmt_tDBInput_2.close();
					}
					if (conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {

						conn_tDBInput_2.commit();

						conn_tDBInput_2.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}
				globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				/**
				 * [tDBInput_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row2 end ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				tHash_Lookup_row2.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tAdvancedHash_row2", true);
				end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row2 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

				/**
				 * [tDBInput_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row2 finally ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				/**
				 * [tAdvancedHash_row2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final ETL_Dim_Epic ETL_Dim_EpicClass = new ETL_Dim_Epic();

		int exitCode = ETL_Dim_EpicClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = ETL_Dim_Epic.class.getClassLoader()
					.getResourceAsStream("jira_dw/etl_dim_epic_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = ETL_Dim_Epic.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_1) {
			globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

			e_tDBInput_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : ETL_Dim_Epic");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 105719 characters generated by Talend Open Studio for Data Integration on the
 * 05 April 2021 17:08:15 WAT
 ************************************************************************************************/