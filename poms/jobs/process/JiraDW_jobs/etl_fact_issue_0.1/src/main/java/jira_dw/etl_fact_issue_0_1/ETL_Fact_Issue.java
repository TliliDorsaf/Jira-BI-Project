// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package jira_dw.etl_fact_issue_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: ETL_Fact_Issue Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status
 */
public class ETL_Fact_Issue implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "ETL_Fact_Issue";
	private final String projectName = "JIRA_DW";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					ETL_Fact_Issue.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(ETL_Fact_Issue.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBInput_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_jiraissue_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_6_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class op1Struct implements routines.system.IPersistableRow<op1Struct> {
		final static byte[] commonByteArrayLock_JIRA_DW_ETL_Fact_Issue = new byte[0];
		static byte[] commonByteArray_JIRA_DW_ETL_Fact_Issue = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal ID_Issue;

		public BigDecimal getID_Issue() {
			return this.ID_Issue;
		}

		public String ID_issue_type;

		public String getID_issue_type() {
			return this.ID_issue_type;
		}

		public BigDecimal ID_project;

		public BigDecimal getID_project() {
			return this.ID_project;
		}

		public Long ID_Sprint;

		public Long getID_Sprint() {
			return this.ID_Sprint;
		}

		public Integer ID_ressources;

		public Integer getID_ressources() {
			return this.ID_ressources;
		}

		public Integer ID_time;

		public Integer getID_time() {
			return this.ID_time;
		}

		public BigDecimal Ecart_delai;

		public BigDecimal getEcart_delai() {
			return this.Ecart_delai;
		}

		public Integer status;

		public Integer getStatus() {
			return this.status;
		}

		public Integer violation;

		public Integer getViolation() {
			return this.violation;
		}

		public BigDecimal ecart;

		public BigDecimal getEcart() {
			return this.ecart;
		}

		public String passed;

		public String getPassed() {
			return this.passed;
		}

		public String restant;

		public String getRestant() {
			return this.restant;
		}

		public java.util.Date issuecreated;

		public java.util.Date getIssuecreated() {
			return this.issuecreated;
		}

		public java.util.Date issueduedate;

		public java.util.Date getIssueduedate() {
			return this.issueduedate;
		}

		public BigDecimal timeoriginalestimate;

		public BigDecimal getTimeoriginalestimate() {
			return this.timeoriginalestimate;
		}

		public BigDecimal timespent;

		public BigDecimal getTimespent() {
			return this.timespent;
		}

		public String summary;

		public String getSummary() {
			return this.summary;
		}

		public String statuswords;

		public String getStatuswords() {
			return this.statuswords;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID_Issue == null) ? 0 : this.ID_Issue.hashCode());

				result = prime * result + ((this.ID_Sprint == null) ? 0 : this.ID_Sprint.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final op1Struct other = (op1Struct) obj;

			if (this.ID_Issue == null) {
				if (other.ID_Issue != null)
					return false;

			} else if (!this.ID_Issue.equals(other.ID_Issue))

				return false;

			if (this.ID_Sprint == null) {
				if (other.ID_Sprint != null)
					return false;

			} else if (!this.ID_Sprint.equals(other.ID_Sprint))

				return false;

			return true;
		}

		public void copyDataTo(op1Struct other) {

			other.ID_Issue = this.ID_Issue;
			other.ID_issue_type = this.ID_issue_type;
			other.ID_project = this.ID_project;
			other.ID_Sprint = this.ID_Sprint;
			other.ID_ressources = this.ID_ressources;
			other.ID_time = this.ID_time;
			other.Ecart_delai = this.Ecart_delai;
			other.status = this.status;
			other.violation = this.violation;
			other.ecart = this.ecart;
			other.passed = this.passed;
			other.restant = this.restant;
			other.issuecreated = this.issuecreated;
			other.issueduedate = this.issueduedate;
			other.timeoriginalestimate = this.timeoriginalestimate;
			other.timespent = this.timespent;
			other.summary = this.summary;
			other.statuswords = this.statuswords;

		}

		public void copyKeysDataTo(op1Struct other) {

			other.ID_Issue = this.ID_Issue;
			other.ID_Sprint = this.ID_Sprint;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_JIRA_DW_ETL_Fact_Issue.length) {
					if (length < 1024 && commonByteArray_JIRA_DW_ETL_Fact_Issue.length == 0) {
						commonByteArray_JIRA_DW_ETL_Fact_Issue = new byte[1024];
					} else {
						commonByteArray_JIRA_DW_ETL_Fact_Issue = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_JIRA_DW_ETL_Fact_Issue, 0, length);
				strReturn = new String(commonByteArray_JIRA_DW_ETL_Fact_Issue, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_JIRA_DW_ETL_Fact_Issue) {

				try {

					int length = 0;

					this.ID_Issue = (BigDecimal) dis.readObject();

					this.ID_issue_type = readString(dis);

					this.ID_project = (BigDecimal) dis.readObject();

					length = dis.readByte();
					if (length == -1) {
						this.ID_Sprint = null;
					} else {
						this.ID_Sprint = dis.readLong();
					}

					this.ID_ressources = readInteger(dis);

					this.ID_time = readInteger(dis);

					this.Ecart_delai = (BigDecimal) dis.readObject();

					this.status = readInteger(dis);

					this.violation = readInteger(dis);

					this.ecart = (BigDecimal) dis.readObject();

					this.passed = readString(dis);

					this.restant = readString(dis);

					this.issuecreated = readDate(dis);

					this.issueduedate = readDate(dis);

					this.timeoriginalestimate = (BigDecimal) dis.readObject();

					this.timespent = (BigDecimal) dis.readObject();

					this.summary = readString(dis);

					this.statuswords = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ID_Issue);

				// String

				writeString(this.ID_issue_type, dos);

				// BigDecimal

				dos.writeObject(this.ID_project);

				// Long

				if (this.ID_Sprint == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.ID_Sprint);
				}

				// Integer

				writeInteger(this.ID_ressources, dos);

				// Integer

				writeInteger(this.ID_time, dos);

				// BigDecimal

				dos.writeObject(this.Ecart_delai);

				// Integer

				writeInteger(this.status, dos);

				// Integer

				writeInteger(this.violation, dos);

				// BigDecimal

				dos.writeObject(this.ecart);

				// String

				writeString(this.passed, dos);

				// String

				writeString(this.restant, dos);

				// java.util.Date

				writeDate(this.issuecreated, dos);

				// java.util.Date

				writeDate(this.issueduedate, dos);

				// BigDecimal

				dos.writeObject(this.timeoriginalestimate);

				// BigDecimal

				dos.writeObject(this.timespent);

				// String

				writeString(this.summary, dos);

				// String

				writeString(this.statuswords, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Issue=" + String.valueOf(ID_Issue));
			sb.append(",ID_issue_type=" + ID_issue_type);
			sb.append(",ID_project=" + String.valueOf(ID_project));
			sb.append(",ID_Sprint=" + String.valueOf(ID_Sprint));
			sb.append(",ID_ressources=" + String.valueOf(ID_ressources));
			sb.append(",ID_time=" + String.valueOf(ID_time));
			sb.append(",Ecart_delai=" + String.valueOf(Ecart_delai));
			sb.append(",status=" + String.valueOf(status));
			sb.append(",violation=" + String.valueOf(violation));
			sb.append(",ecart=" + String.valueOf(ecart));
			sb.append(",passed=" + passed);
			sb.append(",restant=" + restant);
			sb.append(",issuecreated=" + String.valueOf(issuecreated));
			sb.append(",issueduedate=" + String.valueOf(issueduedate));
			sb.append(",timeoriginalestimate=" + String.valueOf(timeoriginalestimate));
			sb.append(",timespent=" + String.valueOf(timespent));
			sb.append(",summary=" + summary);
			sb.append(",statuswords=" + statuswords);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(op1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Issue, other.ID_Issue);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.ID_Sprint, other.ID_Sprint);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_JIRA_DW_ETL_Fact_Issue = new byte[0];
		static byte[] commonByteArray_JIRA_DW_ETL_Fact_Issue = new byte[0];

		public BigDecimal project;

		public BigDecimal getProject() {
			return this.project;
		}

		public String stringvalue;

		public String getStringvalue() {
			return this.stringvalue;
		}

		public BigDecimal issue;

		public BigDecimal getIssue() {
			return this.issue;
		}

		public String assignee;

		public String getAssignee() {
			return this.assignee;
		}

		public String issuetype;

		public String getIssuetype() {
			return this.issuetype;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_JIRA_DW_ETL_Fact_Issue.length) {
					if (length < 1024 && commonByteArray_JIRA_DW_ETL_Fact_Issue.length == 0) {
						commonByteArray_JIRA_DW_ETL_Fact_Issue = new byte[1024];
					} else {
						commonByteArray_JIRA_DW_ETL_Fact_Issue = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_JIRA_DW_ETL_Fact_Issue, 0, length);
				strReturn = new String(commonByteArray_JIRA_DW_ETL_Fact_Issue, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_JIRA_DW_ETL_Fact_Issue) {

				try {

					int length = 0;

					this.project = (BigDecimal) dis.readObject();

					this.stringvalue = readString(dis);

					this.issue = (BigDecimal) dis.readObject();

					this.assignee = readString(dis);

					this.issuetype = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.project);

				// String

				writeString(this.stringvalue, dos);

				// BigDecimal

				dos.writeObject(this.issue);

				// String

				writeString(this.assignee, dos);

				// String

				writeString(this.issuetype, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("project=" + String.valueOf(project));
			sb.append(",stringvalue=" + stringvalue);
			sb.append(",issue=" + String.valueOf(issue));
			sb.append(",assignee=" + assignee);
			sb.append(",issuetype=" + issuetype);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_6Struct implements routines.system.IPersistableRow<after_tDBInput_6Struct> {
		final static byte[] commonByteArrayLock_JIRA_DW_ETL_Fact_Issue = new byte[0];
		static byte[] commonByteArray_JIRA_DW_ETL_Fact_Issue = new byte[0];

		public BigDecimal project;

		public BigDecimal getProject() {
			return this.project;
		}

		public String stringvalue;

		public String getStringvalue() {
			return this.stringvalue;
		}

		public BigDecimal issue;

		public BigDecimal getIssue() {
			return this.issue;
		}

		public String assignee;

		public String getAssignee() {
			return this.assignee;
		}

		public String issuetype;

		public String getIssuetype() {
			return this.issuetype;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_JIRA_DW_ETL_Fact_Issue.length) {
					if (length < 1024 && commonByteArray_JIRA_DW_ETL_Fact_Issue.length == 0) {
						commonByteArray_JIRA_DW_ETL_Fact_Issue = new byte[1024];
					} else {
						commonByteArray_JIRA_DW_ETL_Fact_Issue = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_JIRA_DW_ETL_Fact_Issue, 0, length);
				strReturn = new String(commonByteArray_JIRA_DW_ETL_Fact_Issue, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_JIRA_DW_ETL_Fact_Issue) {

				try {

					int length = 0;

					this.project = (BigDecimal) dis.readObject();

					this.stringvalue = readString(dis);

					this.issue = (BigDecimal) dis.readObject();

					this.assignee = readString(dis);

					this.issuetype = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.project);

				// String

				writeString(this.stringvalue, dos);

				// BigDecimal

				dos.writeObject(this.issue);

				// String

				writeString(this.assignee, dos);

				// String

				writeString(this.issuetype, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("project=" + String.valueOf(project));
			sb.append(",stringvalue=" + stringvalue);
			sb.append(",issue=" + String.valueOf(issue));
			sb.append(",assignee=" + assignee);
			sb.append(",issuetype=" + issuetype);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_1Process(globalMap);
				tDBInput_3Process(globalMap);
				tDBInput_4Process(globalMap);
				tDBInput_5Process(globalMap);
				tDBInput_8Process(globalMap);

				row1Struct row1 = new row1Struct();
				op1Struct op1 = new op1Struct();

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "op1");
				}

				int tos_count_tDBOutput_1 = 0;

				String dbschema_tDBOutput_1 = null;
				dbschema_tDBOutput_1 = "";

				String tableName_tDBOutput_1 = null;
				if (dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
					tableName_tDBOutput_1 = ("Fact_Issues");
				} else {
					tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("Fact_Issues");
				}

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;

				boolean whetherReject_tDBOutput_1 = false;

				java.sql.Connection conn_tDBOutput_1 = null;
				String dbUser_tDBOutput_1 = null;

				java.lang.Class.forName("org.postgresql.Driver");

				String url_tDBOutput_1 = "jdbc:postgresql://" + "127.0.0.1" + ":" + "5432" + "/" + "JiraDW";
				dbUser_tDBOutput_1 = "postgres";

				final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:v98H0InZx9naLPApXPfF7lSzo4IT3s/CHEetwVbBK3c2Bg==");

				String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;

				conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1,
						dbPwd_tDBOutput_1);

				resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
				conn_tDBOutput_1.setAutoCommit(false);
				int commitEvery_tDBOutput_1 = 10000;
				int commitCounter_tDBOutput_1 = 0;

				int batchSize_tDBOutput_1 = 10000;
				int batchSizeCounter_tDBOutput_1 = 0;

				int count_tDBOutput_1 = 0;
				String insert_tDBOutput_1 = "INSERT INTO \"" + tableName_tDBOutput_1
						+ "\" (\"ID_Issue\",\"ID_issue_type\",\"ID_project\",\"ID_Sprint\",\"ID_ressources\",\"ID_time\",\"Ecart_delai\",\"status\",\"violation\",\"ecart\",\"passed\",\"restant\",\"issuecreated\",\"issueduedate\",\"timeoriginalestimate\",\"timespent\",\"summary\",\"statuswords\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<jiraissueStruct> tHash_Lookup_jiraissue = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<jiraissueStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<jiraissueStruct>) globalMap
						.get("tHash_Lookup_jiraissue"));

				jiraissueStruct jiraissueHashKey = new jiraissueStruct();
				jiraissueStruct jiraissueDefault = new jiraissueStruct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) globalMap
						.get("tHash_Lookup_row4"));

				row4Struct row4HashKey = new row4Struct();
				row4Struct row4Default = new row4Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) globalMap
						.get("tHash_Lookup_row5"));

				row5Struct row5HashKey = new row5Struct();
				row5Struct row5Default = new row5Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) globalMap
						.get("tHash_Lookup_row7"));

				row7Struct row7HashKey = new row7Struct();
				row7Struct row7Default = new row7Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) globalMap
						.get("tHash_Lookup_row8"));

				row8Struct row8HashKey = new row8Struct();
				row8Struct row8Default = new row8Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				op1Struct op1_tmp = new op1Struct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tDBInput_6 begin ] start
				 */

				ok_Hash.put("tDBInput_6", false);
				start_Hash.put("tDBInput_6", System.currentTimeMillis());

				currentComponent = "tDBInput_6";

				int tos_count_tDBInput_6 = 0;

				int nb_line_tDBInput_6 = 0;
				java.sql.Connection conn_tDBInput_6 = null;
				String driverClass_tDBInput_6 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBInput_6 = java.lang.Class.forName(driverClass_tDBInput_6);
				String dbUser_tDBInput_6 = "postgres";

				final String decryptedPassword_tDBInput_6 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:9yJPOCYfWoGY1vVzf6CUjnALGdgLVpExXIxVnBw2Bf8VQQ==");

				String dbPwd_tDBInput_6 = decryptedPassword_tDBInput_6;

				String url_tDBInput_6 = "jdbc:postgresql://" + "127.0.0.1" + ":" + "5432" + "/" + "newdb";

				conn_tDBInput_6 = java.sql.DriverManager.getConnection(url_tDBInput_6, dbUser_tDBInput_6,
						dbPwd_tDBInput_6);

				conn_tDBInput_6.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6.createStatement();

				String dbquery_tDBInput_6 = "SELECT project, stringvalue, issue, assignee, issuetype\n	FROM public.customfieldvalue\n	join jiraissue ON jiraissue.id "
						+ "= customfieldvalue.issue \n	join issuetype ON issuetype.id = jiraissue.issuetype\n	where customfieldvalue.customfield = "
						+ "10104\n	and customfieldvalue.issue = jiraissue.id\n	group by project, stringvalue, issue, assignee, issuetype\n	order by"
						+ " project;";

				globalMap.put("tDBInput_6_QUERY", dbquery_tDBInput_6);
				java.sql.ResultSet rs_tDBInput_6 = null;

				try {
					rs_tDBInput_6 = stmt_tDBInput_6.executeQuery(dbquery_tDBInput_6);
					java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6.getMetaData();
					int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6.getColumnCount();

					String tmpContent_tDBInput_6 = null;

					while (rs_tDBInput_6.next()) {
						nb_line_tDBInput_6++;

						if (colQtyInRs_tDBInput_6 < 1) {
							row1.project = null;
						} else {

							row1.project = rs_tDBInput_6.getBigDecimal(1);
							if (rs_tDBInput_6.wasNull()) {
								row1.project = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 2) {
							row1.stringvalue = null;
						} else {

							row1.stringvalue = routines.system.JDBCUtil.getString(rs_tDBInput_6, 2, false);
						}
						if (colQtyInRs_tDBInput_6 < 3) {
							row1.issue = null;
						} else {

							row1.issue = rs_tDBInput_6.getBigDecimal(3);
							if (rs_tDBInput_6.wasNull()) {
								row1.issue = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 4) {
							row1.assignee = null;
						} else {

							row1.assignee = routines.system.JDBCUtil.getString(rs_tDBInput_6, 4, false);
						}
						if (colQtyInRs_tDBInput_6 < 5) {
							row1.issuetype = null;
						} else {

							row1.issuetype = routines.system.JDBCUtil.getString(rs_tDBInput_6, 5, false);
						}

						/**
						 * [tDBInput_6 begin ] stop
						 */

						/**
						 * [tDBInput_6 main ] start
						 */

						currentComponent = "tDBInput_6";

						tos_count_tDBInput_6++;

						/**
						 * [tDBInput_6 main ] stop
						 */

						/**
						 * [tDBInput_6 process_data_begin ] start
						 */

						currentComponent = "tDBInput_6";

						/**
						 * [tDBInput_6 process_data_begin ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row1");
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						///////////////////////////////////////////////
						// Starting Lookup Table "jiraissue"
						///////////////////////////////////////////////

						boolean forceLoopjiraissue = false;

						jiraissueStruct jiraissueObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							jiraissueHashKey.id = row1.issue;

							jiraissueHashKey.hashCodeDirty = true;

							tHash_Lookup_jiraissue.lookup(jiraissueHashKey);

						} // G_TM_M_020

						if (tHash_Lookup_jiraissue != null && tHash_Lookup_jiraissue.getCount(jiraissueHashKey) > 1) { // G
																														// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
							// 'jiraissue' and it contains more one result from keys : jiraissue.id = '" +
							// jiraissueHashKey.id + "'");
						} // G 071

						jiraissueStruct jiraissue = null;

						jiraissueStruct fromLookup_jiraissue = null;
						jiraissue = jiraissueDefault;

						if (tHash_Lookup_jiraissue != null && tHash_Lookup_jiraissue.hasNext()) { // G 099

							fromLookup_jiraissue = tHash_Lookup_jiraissue.next();

						} // G 099

						if (fromLookup_jiraissue != null) {
							jiraissue = fromLookup_jiraissue;
						}

						///////////////////////////////////////////////
						// Starting Lookup Table "row4"
						///////////////////////////////////////////////

						boolean forceLooprow4 = false;

						row4Struct row4ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							Object exprKeyValue_row4__ID_Project = row1.project.longValue();
							if (exprKeyValue_row4__ID_Project == null) {
								hasCasePrimitiveKeyWithNull_tMap_1 = true;
							} else {
								row4HashKey.ID_Project = (long) (Long) exprKeyValue_row4__ID_Project;
							}

							row4HashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091

								tHash_Lookup_row4.lookup(row4HashKey);

							} // G_TM_M_091

						} // G_TM_M_020

						if (tHash_Lookup_row4 != null && tHash_Lookup_row4.getCount(row4HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4'
							// and it contains more one result from keys : row4.ID_Project = '" +
							// row4HashKey.ID_Project + "'");
						} // G 071

						row4Struct row4 = null;

						row4Struct fromLookup_row4 = null;
						row4 = row4Default;

						if (tHash_Lookup_row4 != null && tHash_Lookup_row4.hasNext()) { // G 099

							fromLookup_row4 = tHash_Lookup_row4.next();

						} // G 099

						if (fromLookup_row4 != null) {
							row4 = fromLookup_row4;
						}

						///////////////////////////////////////////////
						// Starting Lookup Table "row5"
						///////////////////////////////////////////////

						boolean forceLooprow5 = false;

						row5Struct row5ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							row5HashKey.key = row1.assignee;

							row5HashKey.hashCodeDirty = true;

							tHash_Lookup_row5.lookup(row5HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row5 != null && tHash_Lookup_row5.getCount(row5HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row5'
							// and it contains more one result from keys : row5.key = '" + row5HashKey.key +
							// "'");
						} // G 071

						row5Struct row5 = null;

						row5Struct fromLookup_row5 = null;
						row5 = row5Default;

						if (tHash_Lookup_row5 != null && tHash_Lookup_row5.hasNext()) { // G 099

							fromLookup_row5 = tHash_Lookup_row5.next();

						} // G 099

						if (fromLookup_row5 != null) {
							row5 = fromLookup_row5;
						}

						///////////////////////////////////////////////
						// Starting Lookup Table "row7"
						///////////////////////////////////////////////

						boolean forceLooprow7 = false;

						row7Struct row7ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							row7HashKey.ID_Issue_Type = row1.issuetype;

							row7HashKey.hashCodeDirty = true;

							tHash_Lookup_row7.lookup(row7HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row7 != null && tHash_Lookup_row7.getCount(row7HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row7'
							// and it contains more one result from keys : row7.ID_Issue_Type = '" +
							// row7HashKey.ID_Issue_Type + "'");
						} // G 071

						row7Struct row7 = null;

						row7Struct fromLookup_row7 = null;
						row7 = row7Default;

						if (tHash_Lookup_row7 != null && tHash_Lookup_row7.hasNext()) { // G 099

							fromLookup_row7 = tHash_Lookup_row7.next();

						} // G 099

						if (fromLookup_row7 != null) {
							row7 = fromLookup_row7;
						}

						///////////////////////////////////////////////
						// Starting Lookup Table "row8"
						///////////////////////////////////////////////

						boolean forceLooprow8 = false;

						row8Struct row8ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							Object exprKeyValue_row8__ID_Sprint = Long.parseLong(row1.stringvalue);
							if (exprKeyValue_row8__ID_Sprint == null) {
								hasCasePrimitiveKeyWithNull_tMap_1 = true;
							} else {
								row8HashKey.ID_Sprint = (long) (Long) exprKeyValue_row8__ID_Sprint;
							}

							row8HashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091

								tHash_Lookup_row8.lookup(row8HashKey);

							} // G_TM_M_091

						} // G_TM_M_020

						if (tHash_Lookup_row8 != null && tHash_Lookup_row8.getCount(row8HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row8'
							// and it contains more one result from keys : row8.ID_Sprint = '" +
							// row8HashKey.ID_Sprint + "'");
						} // G 071

						row8Struct row8 = null;

						row8Struct fromLookup_row8 = null;
						row8 = row8Default;

						if (tHash_Lookup_row8 != null && tHash_Lookup_row8.hasNext()) { // G 099

							fromLookup_row8 = tHash_Lookup_row8.next();

						} // G 099

						if (fromLookup_row8 != null) {
							row8 = fromLookup_row8;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							op1 = null;

// # Output table : 'op1'
							op1_tmp.ID_Issue = row1.issue;
							op1_tmp.ID_issue_type = row1.issuetype;
							op1_tmp.ID_project = row1.project;
							op1_tmp.ID_Sprint = row8.ID_Sprint;
							op1_tmp.ID_ressources = row5.ID_ressources;
							op1_tmp.ID_time = 0;
							op1_tmp.Ecart_delai = jiraissue.diff == null ? BigDecimal.ZERO : jiraissue.diff;
							op1_tmp.status = Integer.parseInt(jiraissue.issuestatus);
							op1_tmp.violation = jiraissue.violation;
							op1_tmp.ecart = jiraissue.ecart == null ? BigDecimal.ZERO : jiraissue.ecart;
							op1_tmp.passed = jiraissue.passed;
							op1_tmp.restant = jiraissue.restant == null ? "0" : jiraissue.restant;
							op1_tmp.issuecreated = jiraissue.created;
							op1_tmp.issueduedate = jiraissue.duedate;
							op1_tmp.timeoriginalestimate = jiraissue.timeoriginalestimate;
							op1_tmp.timespent = jiraissue.timespent == null ? BigDecimal.ZERO : jiraissue.timespent;
							op1_tmp.summary = jiraissue.summary;
							op1_tmp.statuswords = Integer.parseInt(jiraissue.issuestatus) == 6 ? "closed"
									: Integer.parseInt(jiraissue.issuestatus) == 1 ? "open"
											: Integer.parseInt(jiraissue.issuestatus) == 10000 ? "To DO"
													: Integer.parseInt(jiraissue.issuestatus) == 10001 ? "Done"
															: Integer.parseInt(jiraissue.issuestatus) == 10100
																	? "Acceptence"
																	: Integer.parseInt(jiraissue.issuestatus) == 10101
																			? "Checked In"
																			: Integer.parseInt(
																					jiraissue.issuestatus) == 10102
																							? "Code Review"
																							: Integer.parseInt(
																									jiraissue.issuestatus) == 10103
																											? "In Development"
																											: Integer
																													.parseInt(
																															jiraissue.issuestatus) == 10104
																																	? "In Testing"
																																	: Integer
																																			.parseInt(
																																					jiraissue.issuestatus) == 3
																																							? "In Progress"
																																							: Integer
																																									.parseInt(
																																											jiraissue.issuestatus) == 4
																																													? "Reopened"
																																													: Integer
																																															.parseInt(
																																																	jiraissue.issuestatus) == 5
																																																			? "Resolved"
																																																			: "No Data";
							op1 = op1_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */

						/**
						 * [tMap_1 process_data_begin ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_begin ] stop
						 */
// Start of branch "op1"
						if (op1 != null) {

							/**
							 * [tDBOutput_1 main ] start
							 */

							currentComponent = "tDBOutput_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "op1");
							}

							whetherReject_tDBOutput_1 = false;
							pstmt_tDBOutput_1.setBigDecimal(1, op1.ID_Issue);

							if (op1.ID_issue_type == null) {
								pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(2, op1.ID_issue_type);
							}

							pstmt_tDBOutput_1.setBigDecimal(3, op1.ID_project);

							if (op1.ID_Sprint == null) {
								pstmt_tDBOutput_1.setNull(4, java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_1.setLong(4, op1.ID_Sprint);
							}

							if (op1.ID_ressources == null) {
								pstmt_tDBOutput_1.setNull(5, java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_1.setInt(5, op1.ID_ressources);
							}

							if (op1.ID_time == null) {
								pstmt_tDBOutput_1.setNull(6, java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_1.setInt(6, op1.ID_time);
							}

							pstmt_tDBOutput_1.setBigDecimal(7, op1.Ecart_delai);

							if (op1.status == null) {
								pstmt_tDBOutput_1.setNull(8, java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_1.setInt(8, op1.status);
							}

							if (op1.violation == null) {
								pstmt_tDBOutput_1.setNull(9, java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_1.setInt(9, op1.violation);
							}

							pstmt_tDBOutput_1.setBigDecimal(10, op1.ecart);

							if (op1.passed == null) {
								pstmt_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(11, op1.passed);
							}

							if (op1.restant == null) {
								pstmt_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(12, op1.restant);
							}

							if (op1.issuecreated != null) {
								pstmt_tDBOutput_1.setTimestamp(13, new java.sql.Timestamp(op1.issuecreated.getTime()));
							} else {
								pstmt_tDBOutput_1.setNull(13, java.sql.Types.TIMESTAMP);
							}

							if (op1.issueduedate != null) {
								pstmt_tDBOutput_1.setTimestamp(14, new java.sql.Timestamp(op1.issueduedate.getTime()));
							} else {
								pstmt_tDBOutput_1.setNull(14, java.sql.Types.TIMESTAMP);
							}

							pstmt_tDBOutput_1.setBigDecimal(15, op1.timeoriginalestimate);

							pstmt_tDBOutput_1.setBigDecimal(16, op1.timespent);

							if (op1.summary == null) {
								pstmt_tDBOutput_1.setNull(17, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(17, op1.summary);
							}

							if (op1.statuswords == null) {
								pstmt_tDBOutput_1.setNull(18, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(18, op1.statuswords);
							}

							pstmt_tDBOutput_1.addBatch();
							nb_line_tDBOutput_1++;

							batchSizeCounter_tDBOutput_1++;

							if ((batchSize_tDBOutput_1 > 0)
									&& (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
								try {
									int countSum_tDBOutput_1 = 0;

									for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
										countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
									}

									insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

									batchSizeCounter_tDBOutput_1 = 0;
								} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
									java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),
											sqle_tDBOutput_1 = null;
									String errormessage_tDBOutput_1;
									if (ne_tDBOutput_1 != null) {
										// build new exception to provide the original cause
										sqle_tDBOutput_1 = new java.sql.SQLException(
												e_tDBOutput_1.getMessage() + "\ncaused by: "
														+ ne_tDBOutput_1.getMessage(),
												ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(),
												ne_tDBOutput_1);
										errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
									} else {
										errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
									}

									int countSum_tDBOutput_1 = 0;
									for (int countEach_tDBOutput_1 : e_tDBOutput_1.getUpdateCounts()) {
										countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
									}

									insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

									System.err.println(errormessage_tDBOutput_1);

								}
							}

							commitCounter_tDBOutput_1++;
							if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
								if ((batchSize_tDBOutput_1 > 0) && (batchSizeCounter_tDBOutput_1 > 0)) {
									try {
										int countSum_tDBOutput_1 = 0;

										for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
											countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
													: countEach_tDBOutput_1);
										}

										insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

										batchSizeCounter_tDBOutput_1 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
										java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),
												sqle_tDBOutput_1 = null;
										String errormessage_tDBOutput_1;
										if (ne_tDBOutput_1 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_1 = new java.sql.SQLException(
													e_tDBOutput_1.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_1.getMessage(),
													ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(),
													ne_tDBOutput_1);
											errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
										} else {
											errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
										}

										int countSum_tDBOutput_1 = 0;
										for (int countEach_tDBOutput_1 : e_tDBOutput_1.getUpdateCounts()) {
											countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
													: countEach_tDBOutput_1);
										}

										insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

										System.err.println(errormessage_tDBOutput_1);

									}
								}
								conn_tDBOutput_1.commit();

								commitCounter_tDBOutput_1 = 0;
							}

							tos_count_tDBOutput_1++;

							/**
							 * [tDBOutput_1 main ] stop
							 */

							/**
							 * [tDBOutput_1 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_1";

							/**
							 * [tDBOutput_1 process_data_begin ] stop
							 */

							/**
							 * [tDBOutput_1 process_data_end ] start
							 */

							currentComponent = "tDBOutput_1";

							/**
							 * [tDBOutput_1 process_data_end ] stop
							 */

						} // End of branch "op1"

						/**
						 * [tMap_1 process_data_end ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_6 process_data_end ] start
						 */

						currentComponent = "tDBInput_6";

						/**
						 * [tDBInput_6 process_data_end ] stop
						 */

						/**
						 * [tDBInput_6 end ] start
						 */

						currentComponent = "tDBInput_6";

					}
				} finally {
					if (rs_tDBInput_6 != null) {
						rs_tDBInput_6.close();
					}
					if (stmt_tDBInput_6 != null) {
						stmt_tDBInput_6.close();
					}
					if (conn_tDBInput_6 != null && !conn_tDBInput_6.isClosed()) {

						conn_tDBInput_6.commit();

						conn_tDBInput_6.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}
				globalMap.put("tDBInput_6_NB_LINE", nb_line_tDBInput_6);

				ok_Hash.put("tDBInput_6", true);
				end_Hash.put("tDBInput_6", System.currentTimeMillis());

				/**
				 * [tDBInput_6 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_jiraissue != null) {
					tHash_Lookup_jiraissue.endGet();
				}
				globalMap.remove("tHash_Lookup_jiraissue");

				if (tHash_Lookup_row4 != null) {
					tHash_Lookup_row4.endGet();
				}
				globalMap.remove("tHash_Lookup_row4");

				if (tHash_Lookup_row5 != null) {
					tHash_Lookup_row5.endGet();
				}
				globalMap.remove("tHash_Lookup_row5");

				if (tHash_Lookup_row7 != null) {
					tHash_Lookup_row7.endGet();
				}
				globalMap.remove("tHash_Lookup_row7");

				if (tHash_Lookup_row8 != null) {
					tHash_Lookup_row8.endGet();
				}
				globalMap.remove("tHash_Lookup_row8");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					int countSum_tDBOutput_1 = 0;
					if (pstmt_tDBOutput_1 != null && batchSizeCounter_tDBOutput_1 > 0) {

						for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}

					}

					insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

				} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
					java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(), sqle_tDBOutput_1 = null;
					String errormessage_tDBOutput_1;
					if (ne_tDBOutput_1 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_1 = new java.sql.SQLException(
								e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(),
								ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
						errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
					} else {
						errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
					}

					int countSum_tDBOutput_1 = 0;
					for (int countEach_tDBOutput_1 : e_tDBOutput_1.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}

					insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

					System.err.println(errormessage_tDBOutput_1);

				}

				if (pstmt_tDBOutput_1 != null) {

					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");
				}
				resourceMap.put("statementClosed_tDBOutput_1", true);

				conn_tDBOutput_1.commit();

				conn_tDBOutput_1.close();

				resourceMap.put("finish_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "op1");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row7");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row5");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row8");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_jiraissue");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row4");

			try {

				/**
				 * [tDBInput_6 finally ] start
				 */

				currentComponent = "tDBInput_6";

				/**
				 * [tDBInput_6 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
						if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_1")) != null) {
							pstmtToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}

	public static class row7Struct implements routines.system.IPersistableComparableLookupRow<row7Struct> {
		final static byte[] commonByteArrayLock_JIRA_DW_ETL_Fact_Issue = new byte[0];
		static byte[] commonByteArray_JIRA_DW_ETL_Fact_Issue = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ID_Issue_Type;

		public String getID_Issue_Type() {
			return this.ID_Issue_Type;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID_Issue_Type == null) ? 0 : this.ID_Issue_Type.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row7Struct other = (row7Struct) obj;

			if (this.ID_Issue_Type == null) {
				if (other.ID_Issue_Type != null)
					return false;

			} else if (!this.ID_Issue_Type.equals(other.ID_Issue_Type))

				return false;

			return true;
		}

		public void copyDataTo(row7Struct other) {

			other.ID_Issue_Type = this.ID_Issue_Type;
			other.name = this.name;
			other.description = this.description;

		}

		public void copyKeysDataTo(row7Struct other) {

			other.ID_Issue_Type = this.ID_Issue_Type;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_JIRA_DW_ETL_Fact_Issue.length) {
					if (length < 1024 && commonByteArray_JIRA_DW_ETL_Fact_Issue.length == 0) {
						commonByteArray_JIRA_DW_ETL_Fact_Issue = new byte[1024];
					} else {
						commonByteArray_JIRA_DW_ETL_Fact_Issue = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_JIRA_DW_ETL_Fact_Issue, 0, length);
				strReturn = new String(commonByteArray_JIRA_DW_ETL_Fact_Issue, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_JIRA_DW_ETL_Fact_Issue) {

				try {

					int length = 0;

					this.ID_Issue_Type = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ID_Issue_Type, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.name = readString(dis, ois);

				this.description = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.name, dos, oos);

				writeString(this.description, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Issue_Type=" + ID_Issue_Type);
			sb.append(",name=" + name);
			sb.append(",description=" + description);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Issue_Type, other.ID_Issue_Type);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();

				/**
				 * [tAdvancedHash_row7 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row7", false);
				start_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row7";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row7");
				}

				int tos_count_tAdvancedHash_row7 = 0;

				// connection name:row7
				// source node:tDBInput_1 - inputs:(after_tDBInput_6) outputs:(row7,row7) |
				// target node:tAdvancedHash_row7 - inputs:(row7) outputs:()
				// linked node: tMap_1 - inputs:(row1,row7,row5,row8,jiraissue,row4)
				// outputs:(op1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row7 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row7Struct>getLookup(matchingModeEnum_row7);

				globalMap.put("tHash_Lookup_row7", tHash_Lookup_row7);

				/**
				 * [tAdvancedHash_row7 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = "postgres";

				final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:xEnIKjvNRb/PYtaPyrw4mQHzLVb9cABVhbIG7g9HhAFMEw==");

				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;

				String url_tDBInput_1 = "jdbc:postgresql://" + "127.0.0.1" + ":" + "5432" + "/" + "JiraDW";

				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1, dbUser_tDBInput_1,
						dbPwd_tDBInput_1);

				conn_tDBInput_1.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

				String dbquery_tDBInput_1 = "SELECT \n  \"Dim_Type_Issues\".\"ID_Issue_Type\", \n  \"Dim_Type_Issues\".\"name\", \n  \"Dim_Type_Issues\".\"description"
						+ "\"\nFROM \"Dim_Type_Issues\"";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row7.ID_Issue_Type = null;
						} else {

							row7.ID_Issue_Type = routines.system.JDBCUtil.getString(rs_tDBInput_1, 1, false);
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row7.name = null;
						} else {

							row7.name = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							row7.description = null;
						} else {

							row7.description = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row7 main ] start
						 */

						currentComponent = "tAdvancedHash_row7";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row7");
						}

						row7Struct row7_HashRow = new row7Struct();

						row7_HashRow.ID_Issue_Type = row7.ID_Issue_Type;

						row7_HashRow.name = row7.name;

						row7_HashRow.description = row7.description;

						tHash_Lookup_row7.put(row7_HashRow);

						tos_count_tAdvancedHash_row7++;

						/**
						 * [tAdvancedHash_row7 main ] stop
						 */

						/**
						 * [tAdvancedHash_row7 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row7";

						/**
						 * [tAdvancedHash_row7 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row7 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row7";

						/**
						 * [tAdvancedHash_row7 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
					if (conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {

						conn_tDBInput_1.commit();

						conn_tDBInput_1.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}
				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tAdvancedHash_row7 end ] start
				 */

				currentComponent = "tAdvancedHash_row7";

				tHash_Lookup_row7.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row7");
				}

				ok_Hash.put("tAdvancedHash_row7", true);
				end_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row7 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row7 finally ] start
				 */

				currentComponent = "tAdvancedHash_row7";

				/**
				 * [tAdvancedHash_row7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row5Struct implements routines.system.IPersistableComparableLookupRow<row5Struct> {
		final static byte[] commonByteArrayLock_JIRA_DW_ETL_Fact_Issue = new byte[0];
		static byte[] commonByteArray_JIRA_DW_ETL_Fact_Issue = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String name;

		public String getName() {
			return this.name;
		}

		public int ID_ressources;

		public int getID_ressources() {
			return this.ID_ressources;
		}

		public String key;

		public String getKey() {
			return this.key;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.key == null) ? 0 : this.key.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row5Struct other = (row5Struct) obj;

			if (this.key == null) {
				if (other.key != null)
					return false;

			} else if (!this.key.equals(other.key))

				return false;

			return true;
		}

		public void copyDataTo(row5Struct other) {

			other.name = this.name;
			other.ID_ressources = this.ID_ressources;
			other.key = this.key;

		}

		public void copyKeysDataTo(row5Struct other) {

			other.key = this.key;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_JIRA_DW_ETL_Fact_Issue.length) {
					if (length < 1024 && commonByteArray_JIRA_DW_ETL_Fact_Issue.length == 0) {
						commonByteArray_JIRA_DW_ETL_Fact_Issue = new byte[1024];
					} else {
						commonByteArray_JIRA_DW_ETL_Fact_Issue = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_JIRA_DW_ETL_Fact_Issue, 0, length);
				strReturn = new String(commonByteArray_JIRA_DW_ETL_Fact_Issue, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_JIRA_DW_ETL_Fact_Issue) {

				try {

					int length = 0;

					this.key = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.name = readString(dis, ois);

				this.ID_ressources = dis.readInt();

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.name, dos, oos);

				dos.writeInt(this.ID_ressources);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",ID_ressources=" + String.valueOf(ID_ressources));
			sb.append(",key=" + key);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.key, other.key);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();

				/**
				 * [tAdvancedHash_row5 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row5", false);
				start_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row5");
				}

				int tos_count_tAdvancedHash_row5 = 0;

				// connection name:row5
				// source node:tDBInput_3 - inputs:(after_tDBInput_6) outputs:(row5,row5) |
				// target node:tAdvancedHash_row5 - inputs:(row5) outputs:()
				// linked node: tMap_1 - inputs:(row1,row7,row5,row8,jiraissue,row4)
				// outputs:(op1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row5 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row5Struct>getLookup(matchingModeEnum_row5);

				globalMap.put("tHash_Lookup_row5", tHash_Lookup_row5);

				/**
				 * [tAdvancedHash_row5 begin ] stop
				 */

				/**
				 * [tDBInput_3 begin ] start
				 */

				ok_Hash.put("tDBInput_3", false);
				start_Hash.put("tDBInput_3", System.currentTimeMillis());

				currentComponent = "tDBInput_3";

				int tos_count_tDBInput_3 = 0;

				int nb_line_tDBInput_3 = 0;
				java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBInput_3 = java.lang.Class.forName(driverClass_tDBInput_3);
				String dbUser_tDBInput_3 = "postgres";

				final String decryptedPassword_tDBInput_3 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:oysP7hq8MCaQwkri1FkPrGuGBMCXPhTelAx3VM5gAoIW/g==");

				String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;

				String url_tDBInput_3 = "jdbc:postgresql://" + "127.0.0.1" + ":" + "5432" + "/" + "JiraDW";

				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3, dbUser_tDBInput_3,
						dbPwd_tDBInput_3);

				conn_tDBInput_3.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

				String dbquery_tDBInput_3 = "SELECT \n  \"Dim_Ressources\".\"name\", \n  \"Dim_Ressources\".\"ID_ressources\", \n  \"Dim_Ressources\".\"key\"\nFROM  \"D"
						+ "im_Ressources\"";

				globalMap.put("tDBInput_3_QUERY", dbquery_tDBInput_3);
				java.sql.ResultSet rs_tDBInput_3 = null;

				try {
					rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
					java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
					int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

					String tmpContent_tDBInput_3 = null;

					while (rs_tDBInput_3.next()) {
						nb_line_tDBInput_3++;

						if (colQtyInRs_tDBInput_3 < 1) {
							row5.name = null;
						} else {

							row5.name = routines.system.JDBCUtil.getString(rs_tDBInput_3, 1, false);
						}
						if (colQtyInRs_tDBInput_3 < 2) {
							row5.ID_ressources = 0;
						} else {

							row5.ID_ressources = rs_tDBInput_3.getInt(2);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 3) {
							row5.key = null;
						} else {

							row5.key = routines.system.JDBCUtil.getString(rs_tDBInput_3, 3, false);
						}

						/**
						 * [tDBInput_3 begin ] stop
						 */

						/**
						 * [tDBInput_3 main ] start
						 */

						currentComponent = "tDBInput_3";

						tos_count_tDBInput_3++;

						/**
						 * [tDBInput_3 main ] stop
						 */

						/**
						 * [tDBInput_3 process_data_begin ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row5 main ] start
						 */

						currentComponent = "tAdvancedHash_row5";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row5");
						}

						row5Struct row5_HashRow = new row5Struct();

						row5_HashRow.name = row5.name;

						row5_HashRow.ID_ressources = row5.ID_ressources;

						row5_HashRow.key = row5.key;

						tHash_Lookup_row5.put(row5_HashRow);

						tos_count_tAdvancedHash_row5++;

						/**
						 * [tAdvancedHash_row5 main ] stop
						 */

						/**
						 * [tAdvancedHash_row5 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row5";

						/**
						 * [tAdvancedHash_row5 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row5 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row5";

						/**
						 * [tAdvancedHash_row5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 process_data_end ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 end ] start
						 */

						currentComponent = "tDBInput_3";

					}
				} finally {
					if (rs_tDBInput_3 != null) {
						rs_tDBInput_3.close();
					}
					if (stmt_tDBInput_3 != null) {
						stmt_tDBInput_3.close();
					}
					if (conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {

						conn_tDBInput_3.commit();

						conn_tDBInput_3.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}
				globalMap.put("tDBInput_3_NB_LINE", nb_line_tDBInput_3);

				ok_Hash.put("tDBInput_3", true);
				end_Hash.put("tDBInput_3", System.currentTimeMillis());

				/**
				 * [tDBInput_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_row5 end ] start
				 */

				currentComponent = "tAdvancedHash_row5";

				tHash_Lookup_row5.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row5");
				}

				ok_Hash.put("tAdvancedHash_row5", true);
				end_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row5 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_3 finally ] start
				 */

				currentComponent = "tDBInput_3";

				/**
				 * [tDBInput_3 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row5 finally ] start
				 */

				currentComponent = "tAdvancedHash_row5";

				/**
				 * [tAdvancedHash_row5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}

	public static class row8Struct implements routines.system.IPersistableComparableLookupRow<row8Struct> {
		final static byte[] commonByteArrayLock_JIRA_DW_ETL_Fact_Issue = new byte[0];
		static byte[] commonByteArray_JIRA_DW_ETL_Fact_Issue = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String name;

		public String getName() {
			return this.name;
		}

		public Boolean started;

		public Boolean getStarted() {
			return this.started;
		}

		public Boolean closed;

		public Boolean getClosed() {
			return this.closed;
		}

		public Long start_date;

		public Long getStart_date() {
			return this.start_date;
		}

		public Long end_date;

		public Long getEnd_date() {
			return this.end_date;
		}

		public Long complete_date;

		public Long getComplete_date() {
			return this.complete_date;
		}

		public long ID_Sprint;

		public long getID_Sprint() {
			return this.ID_Sprint;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.ID_Sprint;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row8Struct other = (row8Struct) obj;

			if (this.ID_Sprint != other.ID_Sprint)
				return false;

			return true;
		}

		public void copyDataTo(row8Struct other) {

			other.name = this.name;
			other.started = this.started;
			other.closed = this.closed;
			other.start_date = this.start_date;
			other.end_date = this.end_date;
			other.complete_date = this.complete_date;
			other.ID_Sprint = this.ID_Sprint;

		}

		public void copyKeysDataTo(row8Struct other) {

			other.ID_Sprint = this.ID_Sprint;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_JIRA_DW_ETL_Fact_Issue) {

				try {

					int length = 0;

					this.ID_Sprint = dis.readLong();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.ID_Sprint);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.name = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.started = null;
				} else {
					this.started = dis.readBoolean();
				}

				length = dis.readByte();
				if (length == -1) {
					this.closed = null;
				} else {
					this.closed = dis.readBoolean();
				}

				length = dis.readByte();
				if (length == -1) {
					this.start_date = null;
				} else {
					this.start_date = dis.readLong();
				}

				length = dis.readByte();
				if (length == -1) {
					this.end_date = null;
				} else {
					this.end_date = dis.readLong();
				}

				length = dis.readByte();
				if (length == -1) {
					this.complete_date = null;
				} else {
					this.complete_date = dis.readLong();
				}

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.name, dos, oos);

				if (this.started == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.started);
				}

				if (this.closed == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.closed);
				}

				if (this.start_date == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.start_date);
				}

				if (this.end_date == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.end_date);
				}

				if (this.complete_date == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.complete_date);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",started=" + String.valueOf(started));
			sb.append(",closed=" + String.valueOf(closed));
			sb.append(",start_date=" + String.valueOf(start_date));
			sb.append(",end_date=" + String.valueOf(end_date));
			sb.append(",complete_date=" + String.valueOf(complete_date));
			sb.append(",ID_Sprint=" + String.valueOf(ID_Sprint));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Sprint, other.ID_Sprint);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row8Struct row8 = new row8Struct();

				/**
				 * [tAdvancedHash_row8 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row8", false);
				start_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row8";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row8");
				}

				int tos_count_tAdvancedHash_row8 = 0;

				// connection name:row8
				// source node:tDBInput_4 - inputs:(after_tDBInput_6) outputs:(row8,row8) |
				// target node:tAdvancedHash_row8 - inputs:(row8) outputs:()
				// linked node: tMap_1 - inputs:(row1,row7,row5,row8,jiraissue,row4)
				// outputs:(op1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row8 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row8Struct>getLookup(matchingModeEnum_row8);

				globalMap.put("tHash_Lookup_row8", tHash_Lookup_row8);

				/**
				 * [tAdvancedHash_row8 begin ] stop
				 */

				/**
				 * [tDBInput_4 begin ] start
				 */

				ok_Hash.put("tDBInput_4", false);
				start_Hash.put("tDBInput_4", System.currentTimeMillis());

				currentComponent = "tDBInput_4";

				int tos_count_tDBInput_4 = 0;

				int nb_line_tDBInput_4 = 0;
				java.sql.Connection conn_tDBInput_4 = null;
				String driverClass_tDBInput_4 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBInput_4 = java.lang.Class.forName(driverClass_tDBInput_4);
				String dbUser_tDBInput_4 = "postgres";

				final String decryptedPassword_tDBInput_4 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:ZfC6GHS88nDK7ZiSCRfp2iLRL+2NTrfGVNoew1y3MqgVqQ==");

				String dbPwd_tDBInput_4 = decryptedPassword_tDBInput_4;

				String url_tDBInput_4 = "jdbc:postgresql://" + "127.0.0.1" + ":" + "5432" + "/" + "JiraDW";

				conn_tDBInput_4 = java.sql.DriverManager.getConnection(url_tDBInput_4, dbUser_tDBInput_4,
						dbPwd_tDBInput_4);

				conn_tDBInput_4.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

				String dbquery_tDBInput_4 = "SELECT \n  \"Dim_Sprint\".\"name\", \n  \"Dim_Sprint\".\"started\", \n  \"Dim_Sprint\".\"closed\", \n  \"Dim_Sprint\".\"sta"
						+ "rt_date\", \n  \"Dim_Sprint\".\"end_date\", \n  \"Dim_Sprint\".\"complete_date\", \n  \"Dim_Sprint\".\"ID_Sprint\"\nFROM \"D"
						+ "im_Sprint\"";

				globalMap.put("tDBInput_4_QUERY", dbquery_tDBInput_4);
				java.sql.ResultSet rs_tDBInput_4 = null;

				try {
					rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
					java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
					int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

					String tmpContent_tDBInput_4 = null;

					while (rs_tDBInput_4.next()) {
						nb_line_tDBInput_4++;

						if (colQtyInRs_tDBInput_4 < 1) {
							row8.name = null;
						} else {

							row8.name = routines.system.JDBCUtil.getString(rs_tDBInput_4, 1, false);
						}
						if (colQtyInRs_tDBInput_4 < 2) {
							row8.started = null;
						} else {

							row8.started = rs_tDBInput_4.getBoolean(2);
							if (rs_tDBInput_4.wasNull()) {
								row8.started = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 3) {
							row8.closed = null;
						} else {

							row8.closed = rs_tDBInput_4.getBoolean(3);
							if (rs_tDBInput_4.wasNull()) {
								row8.closed = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 4) {
							row8.start_date = null;
						} else {

							row8.start_date = rs_tDBInput_4.getLong(4);
							if (rs_tDBInput_4.wasNull()) {
								row8.start_date = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 5) {
							row8.end_date = null;
						} else {

							row8.end_date = rs_tDBInput_4.getLong(5);
							if (rs_tDBInput_4.wasNull()) {
								row8.end_date = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 6) {
							row8.complete_date = null;
						} else {

							row8.complete_date = rs_tDBInput_4.getLong(6);
							if (rs_tDBInput_4.wasNull()) {
								row8.complete_date = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 7) {
							row8.ID_Sprint = 0;
						} else {

							row8.ID_Sprint = rs_tDBInput_4.getLong(7);
							if (rs_tDBInput_4.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}

						/**
						 * [tDBInput_4 begin ] stop
						 */

						/**
						 * [tDBInput_4 main ] start
						 */

						currentComponent = "tDBInput_4";

						tos_count_tDBInput_4++;

						/**
						 * [tDBInput_4 main ] stop
						 */

						/**
						 * [tDBInput_4 process_data_begin ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row8 main ] start
						 */

						currentComponent = "tAdvancedHash_row8";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row8");
						}

						row8Struct row8_HashRow = new row8Struct();

						row8_HashRow.name = row8.name;

						row8_HashRow.started = row8.started;

						row8_HashRow.closed = row8.closed;

						row8_HashRow.start_date = row8.start_date;

						row8_HashRow.end_date = row8.end_date;

						row8_HashRow.complete_date = row8.complete_date;

						row8_HashRow.ID_Sprint = row8.ID_Sprint;

						tHash_Lookup_row8.put(row8_HashRow);

						tos_count_tAdvancedHash_row8++;

						/**
						 * [tAdvancedHash_row8 main ] stop
						 */

						/**
						 * [tAdvancedHash_row8 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row8";

						/**
						 * [tAdvancedHash_row8 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row8 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row8";

						/**
						 * [tAdvancedHash_row8 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 process_data_end ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 end ] start
						 */

						currentComponent = "tDBInput_4";

					}
				} finally {
					if (rs_tDBInput_4 != null) {
						rs_tDBInput_4.close();
					}
					if (stmt_tDBInput_4 != null) {
						stmt_tDBInput_4.close();
					}
					if (conn_tDBInput_4 != null && !conn_tDBInput_4.isClosed()) {

						conn_tDBInput_4.commit();

						conn_tDBInput_4.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}
				globalMap.put("tDBInput_4_NB_LINE", nb_line_tDBInput_4);

				ok_Hash.put("tDBInput_4", true);
				end_Hash.put("tDBInput_4", System.currentTimeMillis());

				/**
				 * [tDBInput_4 end ] stop
				 */

				/**
				 * [tAdvancedHash_row8 end ] start
				 */

				currentComponent = "tAdvancedHash_row8";

				tHash_Lookup_row8.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row8");
				}

				ok_Hash.put("tAdvancedHash_row8", true);
				end_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row8 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_4 finally ] start
				 */

				currentComponent = "tDBInput_4";

				/**
				 * [tDBInput_4 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row8 finally ] start
				 */

				currentComponent = "tAdvancedHash_row8";

				/**
				 * [tAdvancedHash_row8 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}

	public static class jiraissueStruct implements routines.system.IPersistableComparableLookupRow<jiraissueStruct> {
		final static byte[] commonByteArrayLock_JIRA_DW_ETL_Fact_Issue = new byte[0];
		static byte[] commonByteArray_JIRA_DW_ETL_Fact_Issue = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal id;

		public BigDecimal getId() {
			return this.id;
		}

		public String pkey;

		public String getPkey() {
			return this.pkey;
		}

		public BigDecimal issuenum;

		public BigDecimal getIssuenum() {
			return this.issuenum;
		}

		public BigDecimal project;

		public BigDecimal getProject() {
			return this.project;
		}

		public String reporter;

		public String getReporter() {
			return this.reporter;
		}

		public String assignee;

		public String getAssignee() {
			return this.assignee;
		}

		public String creator;

		public String getCreator() {
			return this.creator;
		}

		public String issuetype;

		public String getIssuetype() {
			return this.issuetype;
		}

		public String summary;

		public String getSummary() {
			return this.summary;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public String environment;

		public String getEnvironment() {
			return this.environment;
		}

		public String priority;

		public String getPriority() {
			return this.priority;
		}

		public String resolution;

		public String getResolution() {
			return this.resolution;
		}

		public String issuestatus;

		public String getIssuestatus() {
			return this.issuestatus;
		}

		public java.util.Date created;

		public java.util.Date getCreated() {
			return this.created;
		}

		public java.util.Date updated;

		public java.util.Date getUpdated() {
			return this.updated;
		}

		public java.util.Date duedate;

		public java.util.Date getDuedate() {
			return this.duedate;
		}

		public java.util.Date resolutiondate;

		public java.util.Date getResolutiondate() {
			return this.resolutiondate;
		}

		public BigDecimal votes;

		public BigDecimal getVotes() {
			return this.votes;
		}

		public BigDecimal watches;

		public BigDecimal getWatches() {
			return this.watches;
		}

		public BigDecimal timeoriginalestimate;

		public BigDecimal getTimeoriginalestimate() {
			return this.timeoriginalestimate;
		}

		public BigDecimal timeestimate;

		public BigDecimal getTimeestimate() {
			return this.timeestimate;
		}

		public BigDecimal timespent;

		public BigDecimal getTimespent() {
			return this.timespent;
		}

		public BigDecimal workflow_id;

		public BigDecimal getWorkflow_id() {
			return this.workflow_id;
		}

		public BigDecimal security;

		public BigDecimal getSecurity() {
			return this.security;
		}

		public BigDecimal fixfor;

		public BigDecimal getFixfor() {
			return this.fixfor;
		}

		public BigDecimal component;

		public BigDecimal getComponent() {
			return this.component;
		}

		public String archived;

		public String getArchived() {
			return this.archived;
		}

		public String archivedby;

		public String getArchivedby() {
			return this.archivedby;
		}

		public java.util.Date archiveddate;

		public java.util.Date getArchiveddate() {
			return this.archiveddate;
		}

		public String passed;

		public String getPassed() {
			return this.passed;
		}

		public String restant;

		public String getRestant() {
			return this.restant;
		}

		public BigDecimal ecart;

		public BigDecimal getEcart() {
			return this.ecart;
		}

		public BigDecimal diff;

		public BigDecimal getDiff() {
			return this.diff;
		}

		public BigDecimal _column_;

		public BigDecimal get_column_() {
			return this._column_;
		}

		public Integer violation;

		public Integer getViolation() {
			return this.violation;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.id == null) ? 0 : new Double(this.id.doubleValue()).hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final jiraissueStruct other = (jiraissueStruct) obj;

			if (this.id == null) {
				if (other.id != null)
					return false;

			} else if ((other.id == null) || (this.id.compareTo(other.id) != 0))

				return false;

			return true;
		}

		public void copyDataTo(jiraissueStruct other) {

			other.id = this.id;
			other.pkey = this.pkey;
			other.issuenum = this.issuenum;
			other.project = this.project;
			other.reporter = this.reporter;
			other.assignee = this.assignee;
			other.creator = this.creator;
			other.issuetype = this.issuetype;
			other.summary = this.summary;
			other.description = this.description;
			other.environment = this.environment;
			other.priority = this.priority;
			other.resolution = this.resolution;
			other.issuestatus = this.issuestatus;
			other.created = this.created;
			other.updated = this.updated;
			other.duedate = this.duedate;
			other.resolutiondate = this.resolutiondate;
			other.votes = this.votes;
			other.watches = this.watches;
			other.timeoriginalestimate = this.timeoriginalestimate;
			other.timeestimate = this.timeestimate;
			other.timespent = this.timespent;
			other.workflow_id = this.workflow_id;
			other.security = this.security;
			other.fixfor = this.fixfor;
			other.component = this.component;
			other.archived = this.archived;
			other.archivedby = this.archivedby;
			other.archiveddate = this.archiveddate;
			other.passed = this.passed;
			other.restant = this.restant;
			other.ecart = this.ecart;
			other.diff = this.diff;
			other._column_ = this._column_;
			other.violation = this.violation;

		}

		public void copyKeysDataTo(jiraissueStruct other) {

			other.id = this.id;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_JIRA_DW_ETL_Fact_Issue) {

				try {

					int length = 0;

					this.id = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.id);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.pkey = readString(dis, ois);

				this.issuenum = (BigDecimal) ois.readObject();

				this.project = (BigDecimal) ois.readObject();

				this.reporter = readString(dis, ois);

				this.assignee = readString(dis, ois);

				this.creator = readString(dis, ois);

				this.issuetype = readString(dis, ois);

				this.summary = readString(dis, ois);

				this.description = readString(dis, ois);

				this.environment = readString(dis, ois);

				this.priority = readString(dis, ois);

				this.resolution = readString(dis, ois);

				this.issuestatus = readString(dis, ois);

				this.created = readDate(dis, ois);

				this.updated = readDate(dis, ois);

				this.duedate = readDate(dis, ois);

				this.resolutiondate = readDate(dis, ois);

				this.votes = (BigDecimal) ois.readObject();

				this.watches = (BigDecimal) ois.readObject();

				this.timeoriginalestimate = (BigDecimal) ois.readObject();

				this.timeestimate = (BigDecimal) ois.readObject();

				this.timespent = (BigDecimal) ois.readObject();

				this.workflow_id = (BigDecimal) ois.readObject();

				this.security = (BigDecimal) ois.readObject();

				this.fixfor = (BigDecimal) ois.readObject();

				this.component = (BigDecimal) ois.readObject();

				this.archived = readString(dis, ois);

				this.archivedby = readString(dis, ois);

				this.archiveddate = readDate(dis, ois);

				this.passed = readString(dis, ois);

				this.restant = readString(dis, ois);

				this.ecart = (BigDecimal) ois.readObject();

				this.diff = (BigDecimal) ois.readObject();

				this._column_ = (BigDecimal) ois.readObject();

				this.violation = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.pkey, dos, oos);

				oos.writeObject(this.issuenum);

				oos.writeObject(this.project);

				writeString(this.reporter, dos, oos);

				writeString(this.assignee, dos, oos);

				writeString(this.creator, dos, oos);

				writeString(this.issuetype, dos, oos);

				writeString(this.summary, dos, oos);

				writeString(this.description, dos, oos);

				writeString(this.environment, dos, oos);

				writeString(this.priority, dos, oos);

				writeString(this.resolution, dos, oos);

				writeString(this.issuestatus, dos, oos);

				writeDate(this.created, dos, oos);

				writeDate(this.updated, dos, oos);

				writeDate(this.duedate, dos, oos);

				writeDate(this.resolutiondate, dos, oos);

				oos.writeObject(this.votes);

				oos.writeObject(this.watches);

				oos.writeObject(this.timeoriginalestimate);

				oos.writeObject(this.timeestimate);

				oos.writeObject(this.timespent);

				oos.writeObject(this.workflow_id);

				oos.writeObject(this.security);

				oos.writeObject(this.fixfor);

				oos.writeObject(this.component);

				writeString(this.archived, dos, oos);

				writeString(this.archivedby, dos, oos);

				writeDate(this.archiveddate, dos, oos);

				writeString(this.passed, dos, oos);

				writeString(this.restant, dos, oos);

				oos.writeObject(this.ecart);

				oos.writeObject(this.diff);

				oos.writeObject(this._column_);

				writeInteger(this.violation, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",pkey=" + pkey);
			sb.append(",issuenum=" + String.valueOf(issuenum));
			sb.append(",project=" + String.valueOf(project));
			sb.append(",reporter=" + reporter);
			sb.append(",assignee=" + assignee);
			sb.append(",creator=" + creator);
			sb.append(",issuetype=" + issuetype);
			sb.append(",summary=" + summary);
			sb.append(",description=" + description);
			sb.append(",environment=" + environment);
			sb.append(",priority=" + priority);
			sb.append(",resolution=" + resolution);
			sb.append(",issuestatus=" + issuestatus);
			sb.append(",created=" + String.valueOf(created));
			sb.append(",updated=" + String.valueOf(updated));
			sb.append(",duedate=" + String.valueOf(duedate));
			sb.append(",resolutiondate=" + String.valueOf(resolutiondate));
			sb.append(",votes=" + String.valueOf(votes));
			sb.append(",watches=" + String.valueOf(watches));
			sb.append(",timeoriginalestimate=" + String.valueOf(timeoriginalestimate));
			sb.append(",timeestimate=" + String.valueOf(timeestimate));
			sb.append(",timespent=" + String.valueOf(timespent));
			sb.append(",workflow_id=" + String.valueOf(workflow_id));
			sb.append(",security=" + String.valueOf(security));
			sb.append(",fixfor=" + String.valueOf(fixfor));
			sb.append(",component=" + String.valueOf(component));
			sb.append(",archived=" + archived);
			sb.append(",archivedby=" + archivedby);
			sb.append(",archiveddate=" + String.valueOf(archiveddate));
			sb.append(",passed=" + passed);
			sb.append(",restant=" + restant);
			sb.append(",ecart=" + String.valueOf(ecart));
			sb.append(",diff=" + String.valueOf(diff));
			sb.append(",_column_=" + String.valueOf(_column_));
			sb.append(",violation=" + String.valueOf(violation));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(jiraissueStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				jiraissueStruct jiraissue = new jiraissueStruct();

				/**
				 * [tAdvancedHash_jiraissue begin ] start
				 */

				ok_Hash.put("tAdvancedHash_jiraissue", false);
				start_Hash.put("tAdvancedHash_jiraissue", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_jiraissue";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "jiraissue");
				}

				int tos_count_tAdvancedHash_jiraissue = 0;

				// connection name:jiraissue
				// source node:tDBInput_5 - inputs:(after_tDBInput_6)
				// outputs:(jiraissue,jiraissue) | target node:tAdvancedHash_jiraissue -
				// inputs:(jiraissue) outputs:()
				// linked node: tMap_1 - inputs:(row1,row7,row5,row8,jiraissue,row4)
				// outputs:(op1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_jiraissue = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<jiraissueStruct> tHash_Lookup_jiraissue = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<jiraissueStruct>getLookup(matchingModeEnum_jiraissue);

				globalMap.put("tHash_Lookup_jiraissue", tHash_Lookup_jiraissue);

				/**
				 * [tAdvancedHash_jiraissue begin ] stop
				 */

				/**
				 * [tDBInput_5 begin ] start
				 */

				ok_Hash.put("tDBInput_5", false);
				start_Hash.put("tDBInput_5", System.currentTimeMillis());

				currentComponent = "tDBInput_5";

				int tos_count_tDBInput_5 = 0;

				int nb_line_tDBInput_5 = 0;
				java.sql.Connection conn_tDBInput_5 = null;
				String driverClass_tDBInput_5 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBInput_5 = java.lang.Class.forName(driverClass_tDBInput_5);
				String dbUser_tDBInput_5 = "postgres";

				final String decryptedPassword_tDBInput_5 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:Pchq9U2wIuRSO4oKuUlQVsoz8Tq3DSDwgF77pt2nbB61cQ==");

				String dbPwd_tDBInput_5 = decryptedPassword_tDBInput_5;

				String url_tDBInput_5 = "jdbc:postgresql://" + "127.0.0.1" + ":" + "5432" + "/" + "newdb";

				conn_tDBInput_5 = java.sql.DriverManager.getConnection(url_tDBInput_5, dbUser_tDBInput_5,
						dbPwd_tDBInput_5);

				conn_tDBInput_5.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

				String dbquery_tDBInput_5 = "SELECT \n*, age(\"created\") as passed, age(\"duedate\") as restant,\nCASE\nWHEN \"timeoriginalestimate\" is NULL THEN "
						+ "1\nWHEN \"timeoriginalestimate\" = 0 THEN 1\n	ELSE ( \"timespent\" - \"timeoriginalestimate\") / \"timeoriginalestimate"
						+ "\"\nEND AS ecart, ( \"timeoriginalestimate\"- \"timespent\") as diff, \"timeoriginalestimate\" - \"timespent\" ,\nCASE\n"
						+ "	WHEN \"timeoriginalestimate\"- \"timespent\" < 0 THEN 1 \n	ELSE 0\nEND AS violation\nFROM \"jiraissue\"";

				globalMap.put("tDBInput_5_QUERY", dbquery_tDBInput_5);
				java.sql.ResultSet rs_tDBInput_5 = null;

				try {
					rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
					java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
					int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

					String tmpContent_tDBInput_5 = null;

					while (rs_tDBInput_5.next()) {
						nb_line_tDBInput_5++;

						if (colQtyInRs_tDBInput_5 < 1) {
							jiraissue.id = null;
						} else {

							jiraissue.id = rs_tDBInput_5.getBigDecimal(1);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 2) {
							jiraissue.pkey = null;
						} else {

							jiraissue.pkey = routines.system.JDBCUtil.getString(rs_tDBInput_5, 2, false);
						}
						if (colQtyInRs_tDBInput_5 < 3) {
							jiraissue.issuenum = null;
						} else {

							jiraissue.issuenum = rs_tDBInput_5.getBigDecimal(3);
							if (rs_tDBInput_5.wasNull()) {
								jiraissue.issuenum = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 4) {
							jiraissue.project = null;
						} else {

							jiraissue.project = rs_tDBInput_5.getBigDecimal(4);
							if (rs_tDBInput_5.wasNull()) {
								jiraissue.project = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 5) {
							jiraissue.reporter = null;
						} else {

							jiraissue.reporter = routines.system.JDBCUtil.getString(rs_tDBInput_5, 5, false);
						}
						if (colQtyInRs_tDBInput_5 < 6) {
							jiraissue.assignee = null;
						} else {

							jiraissue.assignee = routines.system.JDBCUtil.getString(rs_tDBInput_5, 6, false);
						}
						if (colQtyInRs_tDBInput_5 < 7) {
							jiraissue.creator = null;
						} else {

							jiraissue.creator = routines.system.JDBCUtil.getString(rs_tDBInput_5, 7, false);
						}
						if (colQtyInRs_tDBInput_5 < 8) {
							jiraissue.issuetype = null;
						} else {

							jiraissue.issuetype = routines.system.JDBCUtil.getString(rs_tDBInput_5, 8, false);
						}
						if (colQtyInRs_tDBInput_5 < 9) {
							jiraissue.summary = null;
						} else {

							jiraissue.summary = routines.system.JDBCUtil.getString(rs_tDBInput_5, 9, false);
						}
						if (colQtyInRs_tDBInput_5 < 10) {
							jiraissue.description = null;
						} else {

							jiraissue.description = routines.system.JDBCUtil.getString(rs_tDBInput_5, 10, false);
						}
						if (colQtyInRs_tDBInput_5 < 11) {
							jiraissue.environment = null;
						} else {

							jiraissue.environment = routines.system.JDBCUtil.getString(rs_tDBInput_5, 11, false);
						}
						if (colQtyInRs_tDBInput_5 < 12) {
							jiraissue.priority = null;
						} else {

							jiraissue.priority = routines.system.JDBCUtil.getString(rs_tDBInput_5, 12, false);
						}
						if (colQtyInRs_tDBInput_5 < 13) {
							jiraissue.resolution = null;
						} else {

							jiraissue.resolution = routines.system.JDBCUtil.getString(rs_tDBInput_5, 13, false);
						}
						if (colQtyInRs_tDBInput_5 < 14) {
							jiraissue.issuestatus = null;
						} else {

							jiraissue.issuestatus = routines.system.JDBCUtil.getString(rs_tDBInput_5, 14, false);
						}
						if (colQtyInRs_tDBInput_5 < 15) {
							jiraissue.created = null;
						} else {

							jiraissue.created = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 15);
						}
						if (colQtyInRs_tDBInput_5 < 16) {
							jiraissue.updated = null;
						} else {

							jiraissue.updated = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 16);
						}
						if (colQtyInRs_tDBInput_5 < 17) {
							jiraissue.duedate = null;
						} else {

							jiraissue.duedate = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 17);
						}
						if (colQtyInRs_tDBInput_5 < 18) {
							jiraissue.resolutiondate = null;
						} else {

							jiraissue.resolutiondate = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 18);
						}
						if (colQtyInRs_tDBInput_5 < 19) {
							jiraissue.votes = null;
						} else {

							jiraissue.votes = rs_tDBInput_5.getBigDecimal(19);
							if (rs_tDBInput_5.wasNull()) {
								jiraissue.votes = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 20) {
							jiraissue.watches = null;
						} else {

							jiraissue.watches = rs_tDBInput_5.getBigDecimal(20);
							if (rs_tDBInput_5.wasNull()) {
								jiraissue.watches = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 21) {
							jiraissue.timeoriginalestimate = null;
						} else {

							jiraissue.timeoriginalestimate = rs_tDBInput_5.getBigDecimal(21);
							if (rs_tDBInput_5.wasNull()) {
								jiraissue.timeoriginalestimate = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 22) {
							jiraissue.timeestimate = null;
						} else {

							jiraissue.timeestimate = rs_tDBInput_5.getBigDecimal(22);
							if (rs_tDBInput_5.wasNull()) {
								jiraissue.timeestimate = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 23) {
							jiraissue.timespent = null;
						} else {

							jiraissue.timespent = rs_tDBInput_5.getBigDecimal(23);
							if (rs_tDBInput_5.wasNull()) {
								jiraissue.timespent = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 24) {
							jiraissue.workflow_id = null;
						} else {

							jiraissue.workflow_id = rs_tDBInput_5.getBigDecimal(24);
							if (rs_tDBInput_5.wasNull()) {
								jiraissue.workflow_id = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 25) {
							jiraissue.security = null;
						} else {

							jiraissue.security = rs_tDBInput_5.getBigDecimal(25);
							if (rs_tDBInput_5.wasNull()) {
								jiraissue.security = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 26) {
							jiraissue.fixfor = null;
						} else {

							jiraissue.fixfor = rs_tDBInput_5.getBigDecimal(26);
							if (rs_tDBInput_5.wasNull()) {
								jiraissue.fixfor = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 27) {
							jiraissue.component = null;
						} else {

							jiraissue.component = rs_tDBInput_5.getBigDecimal(27);
							if (rs_tDBInput_5.wasNull()) {
								jiraissue.component = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 28) {
							jiraissue.archived = null;
						} else {

							jiraissue.archived = routines.system.JDBCUtil.getString(rs_tDBInput_5, 28, false);
						}
						if (colQtyInRs_tDBInput_5 < 29) {
							jiraissue.archivedby = null;
						} else {

							jiraissue.archivedby = routines.system.JDBCUtil.getString(rs_tDBInput_5, 29, false);
						}
						if (colQtyInRs_tDBInput_5 < 30) {
							jiraissue.archiveddate = null;
						} else {

							jiraissue.archiveddate = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 30);
						}
						if (colQtyInRs_tDBInput_5 < 31) {
							jiraissue.passed = null;
						} else {

							jiraissue.passed = routines.system.JDBCUtil.getString(rs_tDBInput_5, 31, false);
						}
						if (colQtyInRs_tDBInput_5 < 32) {
							jiraissue.restant = null;
						} else {

							jiraissue.restant = routines.system.JDBCUtil.getString(rs_tDBInput_5, 32, false);
						}
						if (colQtyInRs_tDBInput_5 < 33) {
							jiraissue.ecart = null;
						} else {

							jiraissue.ecart = rs_tDBInput_5.getBigDecimal(33);
							if (rs_tDBInput_5.wasNull()) {
								jiraissue.ecart = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 34) {
							jiraissue.diff = null;
						} else {

							jiraissue.diff = rs_tDBInput_5.getBigDecimal(34);
							if (rs_tDBInput_5.wasNull()) {
								jiraissue.diff = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 35) {
							jiraissue._column_ = null;
						} else {

							jiraissue._column_ = rs_tDBInput_5.getBigDecimal(35);
							if (rs_tDBInput_5.wasNull()) {
								jiraissue._column_ = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 36) {
							jiraissue.violation = null;
						} else {

							jiraissue.violation = rs_tDBInput_5.getInt(36);
							if (rs_tDBInput_5.wasNull()) {
								jiraissue.violation = null;
							}
						}

						/**
						 * [tDBInput_5 begin ] stop
						 */

						/**
						 * [tDBInput_5 main ] start
						 */

						currentComponent = "tDBInput_5";

						tos_count_tDBInput_5++;

						/**
						 * [tDBInput_5 main ] stop
						 */

						/**
						 * [tDBInput_5 process_data_begin ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_jiraissue main ] start
						 */

						currentComponent = "tAdvancedHash_jiraissue";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "jiraissue");
						}

						jiraissueStruct jiraissue_HashRow = new jiraissueStruct();

						jiraissue_HashRow.id = jiraissue.id;

						jiraissue_HashRow.pkey = jiraissue.pkey;

						jiraissue_HashRow.issuenum = jiraissue.issuenum;

						jiraissue_HashRow.project = jiraissue.project;

						jiraissue_HashRow.reporter = jiraissue.reporter;

						jiraissue_HashRow.assignee = jiraissue.assignee;

						jiraissue_HashRow.creator = jiraissue.creator;

						jiraissue_HashRow.issuetype = jiraissue.issuetype;

						jiraissue_HashRow.summary = jiraissue.summary;

						jiraissue_HashRow.description = jiraissue.description;

						jiraissue_HashRow.environment = jiraissue.environment;

						jiraissue_HashRow.priority = jiraissue.priority;

						jiraissue_HashRow.resolution = jiraissue.resolution;

						jiraissue_HashRow.issuestatus = jiraissue.issuestatus;

						jiraissue_HashRow.created = jiraissue.created;

						jiraissue_HashRow.updated = jiraissue.updated;

						jiraissue_HashRow.duedate = jiraissue.duedate;

						jiraissue_HashRow.resolutiondate = jiraissue.resolutiondate;

						jiraissue_HashRow.votes = jiraissue.votes;

						jiraissue_HashRow.watches = jiraissue.watches;

						jiraissue_HashRow.timeoriginalestimate = jiraissue.timeoriginalestimate;

						jiraissue_HashRow.timeestimate = jiraissue.timeestimate;

						jiraissue_HashRow.timespent = jiraissue.timespent;

						jiraissue_HashRow.workflow_id = jiraissue.workflow_id;

						jiraissue_HashRow.security = jiraissue.security;

						jiraissue_HashRow.fixfor = jiraissue.fixfor;

						jiraissue_HashRow.component = jiraissue.component;

						jiraissue_HashRow.archived = jiraissue.archived;

						jiraissue_HashRow.archivedby = jiraissue.archivedby;

						jiraissue_HashRow.archiveddate = jiraissue.archiveddate;

						jiraissue_HashRow.passed = jiraissue.passed;

						jiraissue_HashRow.restant = jiraissue.restant;

						jiraissue_HashRow.ecart = jiraissue.ecart;

						jiraissue_HashRow.diff = jiraissue.diff;

						jiraissue_HashRow._column_ = jiraissue._column_;

						jiraissue_HashRow.violation = jiraissue.violation;

						tHash_Lookup_jiraissue.put(jiraissue_HashRow);

						tos_count_tAdvancedHash_jiraissue++;

						/**
						 * [tAdvancedHash_jiraissue main ] stop
						 */

						/**
						 * [tAdvancedHash_jiraissue process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_jiraissue";

						/**
						 * [tAdvancedHash_jiraissue process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_jiraissue process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_jiraissue";

						/**
						 * [tAdvancedHash_jiraissue process_data_end ] stop
						 */

						/**
						 * [tDBInput_5 process_data_end ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_5 end ] start
						 */

						currentComponent = "tDBInput_5";

					}
				} finally {
					if (rs_tDBInput_5 != null) {
						rs_tDBInput_5.close();
					}
					if (stmt_tDBInput_5 != null) {
						stmt_tDBInput_5.close();
					}
					if (conn_tDBInput_5 != null && !conn_tDBInput_5.isClosed()) {

						conn_tDBInput_5.commit();

						conn_tDBInput_5.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}
				globalMap.put("tDBInput_5_NB_LINE", nb_line_tDBInput_5);

				ok_Hash.put("tDBInput_5", true);
				end_Hash.put("tDBInput_5", System.currentTimeMillis());

				/**
				 * [tDBInput_5 end ] stop
				 */

				/**
				 * [tAdvancedHash_jiraissue end ] start
				 */

				currentComponent = "tAdvancedHash_jiraissue";

				tHash_Lookup_jiraissue.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "jiraissue");
				}

				ok_Hash.put("tAdvancedHash_jiraissue", true);
				end_Hash.put("tAdvancedHash_jiraissue", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_jiraissue end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_5 finally ] start
				 */

				currentComponent = "tDBInput_5";

				/**
				 * [tDBInput_5 finally ] stop
				 */

				/**
				 * [tAdvancedHash_jiraissue finally ] start
				 */

				currentComponent = "tAdvancedHash_jiraissue";

				/**
				 * [tAdvancedHash_jiraissue finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements routines.system.IPersistableComparableLookupRow<row4Struct> {
		final static byte[] commonByteArrayLock_JIRA_DW_ETL_Fact_Issue = new byte[0];
		static byte[] commonByteArray_JIRA_DW_ETL_Fact_Issue = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long ID_Project;

		public long getID_Project() {
			return this.ID_Project;
		}

		public String p_name;

		public String getP_name() {
			return this.p_name;
		}

		public String lead;

		public String getLead() {
			return this.lead;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public String key;

		public String getKey() {
			return this.key;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.ID_Project;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.ID_Project != other.ID_Project)
				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.ID_Project = this.ID_Project;
			other.p_name = this.p_name;
			other.lead = this.lead;
			other.description = this.description;
			other.key = this.key;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.ID_Project = this.ID_Project;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_JIRA_DW_ETL_Fact_Issue) {

				try {

					int length = 0;

					this.ID_Project = dis.readLong();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.ID_Project);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.p_name = readString(dis, ois);

				this.lead = readString(dis, ois);

				this.description = readString(dis, ois);

				this.key = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.p_name, dos, oos);

				writeString(this.lead, dos, oos);

				writeString(this.description, dos, oos);

				writeString(this.key, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Project=" + String.valueOf(ID_Project));
			sb.append(",p_name=" + p_name);
			sb.append(",lead=" + lead);
			sb.append(",description=" + description);
			sb.append(",key=" + key);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Project, other.ID_Project);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tAdvancedHash_row4 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row4", false);
				start_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tAdvancedHash_row4 = 0;

				// connection name:row4
				// source node:tDBInput_8 - inputs:(after_tDBInput_6) outputs:(row4,row4) |
				// target node:tAdvancedHash_row4 - inputs:(row4) outputs:()
				// linked node: tMap_1 - inputs:(row1,row7,row5,row8,jiraissue,row4)
				// outputs:(op1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row4Struct>getLookup(matchingModeEnum_row4);

				globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);

				/**
				 * [tAdvancedHash_row4 begin ] stop
				 */

				/**
				 * [tDBInput_8 begin ] start
				 */

				ok_Hash.put("tDBInput_8", false);
				start_Hash.put("tDBInput_8", System.currentTimeMillis());

				currentComponent = "tDBInput_8";

				int tos_count_tDBInput_8 = 0;

				int nb_line_tDBInput_8 = 0;
				java.sql.Connection conn_tDBInput_8 = null;
				String driverClass_tDBInput_8 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBInput_8 = java.lang.Class.forName(driverClass_tDBInput_8);
				String dbUser_tDBInput_8 = "postgres";

				final String decryptedPassword_tDBInput_8 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:BVsFunDKBL9ziP8j3ya/VPy5kTCLVkZOmp3ALreKaSuBxg==");

				String dbPwd_tDBInput_8 = decryptedPassword_tDBInput_8;

				String url_tDBInput_8 = "jdbc:postgresql://" + "127.0.0.1" + ":" + "5432" + "/" + "JiraDW";

				conn_tDBInput_8 = java.sql.DriverManager.getConnection(url_tDBInput_8, dbUser_tDBInput_8,
						dbPwd_tDBInput_8);

				conn_tDBInput_8.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_8 = conn_tDBInput_8.createStatement();

				String dbquery_tDBInput_8 = "SELECT \n  \"Dim_Projects\".\"ID_Project\", \n  \"Dim_Projects\".\"p_name\", \n  \"Dim_Projects\".\"lead\", \n  \"Dim_Proje"
						+ "cts\".\"description\", \n  \"Dim_Projects\".\"key\"\nFROM \"Dim_Projects\"";

				globalMap.put("tDBInput_8_QUERY", dbquery_tDBInput_8);
				java.sql.ResultSet rs_tDBInput_8 = null;

				try {
					rs_tDBInput_8 = stmt_tDBInput_8.executeQuery(dbquery_tDBInput_8);
					java.sql.ResultSetMetaData rsmd_tDBInput_8 = rs_tDBInput_8.getMetaData();
					int colQtyInRs_tDBInput_8 = rsmd_tDBInput_8.getColumnCount();

					String tmpContent_tDBInput_8 = null;

					while (rs_tDBInput_8.next()) {
						nb_line_tDBInput_8++;

						if (colQtyInRs_tDBInput_8 < 1) {
							row4.ID_Project = 0;
						} else {

							row4.ID_Project = rs_tDBInput_8.getLong(1);
							if (rs_tDBInput_8.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_8 < 2) {
							row4.p_name = null;
						} else {

							row4.p_name = routines.system.JDBCUtil.getString(rs_tDBInput_8, 2, false);
						}
						if (colQtyInRs_tDBInput_8 < 3) {
							row4.lead = null;
						} else {

							row4.lead = routines.system.JDBCUtil.getString(rs_tDBInput_8, 3, false);
						}
						if (colQtyInRs_tDBInput_8 < 4) {
							row4.description = null;
						} else {

							row4.description = routines.system.JDBCUtil.getString(rs_tDBInput_8, 4, false);
						}
						if (colQtyInRs_tDBInput_8 < 5) {
							row4.key = null;
						} else {

							row4.key = routines.system.JDBCUtil.getString(rs_tDBInput_8, 5, false);
						}

						/**
						 * [tDBInput_8 begin ] stop
						 */

						/**
						 * [tDBInput_8 main ] start
						 */

						currentComponent = "tDBInput_8";

						tos_count_tDBInput_8++;

						/**
						 * [tDBInput_8 main ] stop
						 */

						/**
						 * [tDBInput_8 process_data_begin ] start
						 */

						currentComponent = "tDBInput_8";

						/**
						 * [tDBInput_8 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row4 main ] start
						 */

						currentComponent = "tAdvancedHash_row4";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row4");
						}

						row4Struct row4_HashRow = new row4Struct();

						row4_HashRow.ID_Project = row4.ID_Project;

						row4_HashRow.p_name = row4.p_name;

						row4_HashRow.lead = row4.lead;

						row4_HashRow.description = row4.description;

						row4_HashRow.key = row4.key;

						tHash_Lookup_row4.put(row4_HashRow);

						tos_count_tAdvancedHash_row4++;

						/**
						 * [tAdvancedHash_row4 main ] stop
						 */

						/**
						 * [tAdvancedHash_row4 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row4";

						/**
						 * [tAdvancedHash_row4 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row4 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row4";

						/**
						 * [tAdvancedHash_row4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_8 process_data_end ] start
						 */

						currentComponent = "tDBInput_8";

						/**
						 * [tDBInput_8 process_data_end ] stop
						 */

						/**
						 * [tDBInput_8 end ] start
						 */

						currentComponent = "tDBInput_8";

					}
				} finally {
					if (rs_tDBInput_8 != null) {
						rs_tDBInput_8.close();
					}
					if (stmt_tDBInput_8 != null) {
						stmt_tDBInput_8.close();
					}
					if (conn_tDBInput_8 != null && !conn_tDBInput_8.isClosed()) {

						conn_tDBInput_8.commit();

						conn_tDBInput_8.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}
				globalMap.put("tDBInput_8_NB_LINE", nb_line_tDBInput_8);

				ok_Hash.put("tDBInput_8", true);
				end_Hash.put("tDBInput_8", System.currentTimeMillis());

				/**
				 * [tDBInput_8 end ] stop
				 */

				/**
				 * [tAdvancedHash_row4 end ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				tHash_Lookup_row4.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tAdvancedHash_row4", true);
				end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row4 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_8 finally ] start
				 */

				currentComponent = "tDBInput_8";

				/**
				 * [tDBInput_8 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row4 finally ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				/**
				 * [tAdvancedHash_row4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_8_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final ETL_Fact_Issue ETL_Fact_IssueClass = new ETL_Fact_Issue();

		int exitCode = ETL_Fact_IssueClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = ETL_Fact_Issue.class.getClassLoader()
					.getResourceAsStream("jira_dw/etl_fact_issue_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = ETL_Fact_Issue.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBInput_6Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_6) {
			globalMap.put("tDBInput_6_SUBPROCESS_STATE", -1);

			e_tDBInput_6.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println(
					(endUsedMemory - startUsedMemory) + " bytes memory increase when running : ETL_Fact_Issue");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 187435 characters generated by Talend Open Studio for Data Integration on the
 * 24 April 2021 09:01:57 WAT
 ************************************************************************************************/